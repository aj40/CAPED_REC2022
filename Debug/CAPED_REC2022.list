
CAPED_REC2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b44  08006b44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b4c  08006b4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb4  20000074  08006bc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c28  08006bc8  00021c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b0a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004334  00000000  00000000  00045bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00049ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  0004b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a02f  00000000  00000000  0004d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f426  00000000  00000000  0007721f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100e4b  00000000  00000000  00096645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b8  00000000  00000000  001974e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a0c 	.word	0x08006a0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006a0c 	.word	0x08006a0c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004cc:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <MX_FREERTOS_Init+0x28>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <MX_FREERTOS_Init+0x2c>)
 80004d2:	f003 fc6b 	bl	8003dac <osThreadNew>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <MX_FREERTOS_Init+0x30>)
 80004da:	6013      	str	r3, [r2, #0]

  /* creation of queueToTop */
  queueToTopHandle = osThreadNew(StartQueueToTop, NULL, &queueToTop_attributes);
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <MX_FREERTOS_Init+0x34>)
 80004de:	2100      	movs	r1, #0
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <MX_FREERTOS_Init+0x38>)
 80004e2:	f003 fc63 	bl	8003dac <osThreadNew>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <MX_FREERTOS_Init+0x3c>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	08006a54 	.word	0x08006a54
 80004f4:	08000509 	.word	0x08000509
 80004f8:	20001a28 	.word	0x20001a28
 80004fc:	08006a78 	.word	0x08006a78
 8000500:	08000519 	.word	0x08000519
 8000504:	20001a2c 	.word	0x20001a2c

08000508 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000510:	2001      	movs	r0, #1
 8000512:	f003 fcdd 	bl	8003ed0 <osDelay>
 8000516:	e7fb      	b.n	8000510 <StartDefaultTask+0x8>

08000518 <StartQueueToTop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartQueueToTop */
void StartQueueToTop(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartQueueToTop */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f003 fcd5 	bl	8003ed0 <osDelay>
 8000526:	e7fb      	b.n	8000520 <StartQueueToTop+0x8>

08000528 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	4b76      	ldr	r3, [pc, #472]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a75      	ldr	r2, [pc, #468]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b73      	ldr	r3, [pc, #460]	; (8000718 <MX_GPIO_Init+0x1f0>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000556:	4b70      	ldr	r3, [pc, #448]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a6f      	ldr	r2, [pc, #444]	; (8000718 <MX_GPIO_Init+0x1f0>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b6d      	ldr	r3, [pc, #436]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b6a      	ldr	r3, [pc, #424]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a69      	ldr	r2, [pc, #420]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b67      	ldr	r3, [pc, #412]	; (8000718 <MX_GPIO_Init+0x1f0>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b64      	ldr	r3, [pc, #400]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a63      	ldr	r2, [pc, #396]	; (8000718 <MX_GPIO_Init+0x1f0>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b61      	ldr	r3, [pc, #388]	; (8000718 <MX_GPIO_Init+0x1f0>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	4b5e      	ldr	r3, [pc, #376]	; (8000718 <MX_GPIO_Init+0x1f0>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a5d      	ldr	r2, [pc, #372]	; (8000718 <MX_GPIO_Init+0x1f0>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b5b      	ldr	r3, [pc, #364]	; (8000718 <MX_GPIO_Init+0x1f0>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Servo_Enable_Pin|Stepper2_step_Pin|Stepper2_EN_Pin|Stepper1_dir_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f641 4104 	movw	r1, #7172	; 0x1c04
 80005bc:	4857      	ldr	r0, [pc, #348]	; (800071c <MX_GPIO_Init+0x1f4>)
 80005be:	f000 ff91 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Stepper2_dir_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f248 0120 	movw	r1, #32800	; 0x8020
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 ff8a 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper1_step_GPIO_Port, Stepper1_step_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2104      	movs	r1, #4
 80005d4:	4852      	ldr	r0, [pc, #328]	; (8000720 <MX_GPIO_Init+0x1f8>)
 80005d6:	f000 ff85 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper1_EN_GPIO_Port, Stepper1_EN_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2108      	movs	r1, #8
 80005de:	4851      	ldr	r0, [pc, #324]	; (8000724 <MX_GPIO_Init+0x1fc>)
 80005e0:	f000 ff80 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	4848      	ldr	r0, [pc, #288]	; (800071c <MX_GPIO_Init+0x1f4>)
 80005fc:	f000 fdc8 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000600:	2303      	movs	r3, #3
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000604:	2303      	movs	r3, #3
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4845      	ldr	r0, [pc, #276]	; (8000728 <MX_GPIO_Init+0x200>)
 8000614:	f000 fdbc 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Servo_Enable_Pin|Stepper2_step_Pin|Stepper2_EN_Pin|Stepper1_dir_Pin;
 8000618:	f641 4304 	movw	r3, #7172	; 0x1c04
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	483a      	ldr	r0, [pc, #232]	; (800071c <MX_GPIO_Init+0x1f4>)
 8000632:	f000 fdad 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000636:	2308      	movs	r3, #8
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063a:	2303      	movs	r3, #3
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	4834      	ldr	r0, [pc, #208]	; (800071c <MX_GPIO_Init+0x1f4>)
 800064a:	f000 fda1 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800064e:	2313      	movs	r3, #19
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000652:	2303      	movs	r3, #3
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 fd94 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Stepper2_dir_Pin;
 8000668:	f248 0320 	movw	r3, #32800	; 0x8020
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 fd84 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|Override1_Pin|RIDESTOP_Pin
 8000688:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 800068c:	617b      	str	r3, [r7, #20]
                          |ESTOP_Pin|Limit5_Pin|Limit6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f000 fd76 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = IR3_Pin|IR4_Pin|Override5_Pin|Override4_Pin
 80006a4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80006a8:	617b      	str	r3, [r7, #20]
                          |Override3_Pin|Override2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4818      	ldr	r0, [pc, #96]	; (800071c <MX_GPIO_Init+0x1f4>)
 80006ba:	f000 fd69 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IR5_Pin|IR6_Pin|IR7_Pin|Limit4_Pin
 80006be:	f24f 3337 	movw	r3, #62263	; 0xf337
 80006c2:	617b      	str	r3, [r7, #20]
                          |Limit3_Pin|Limit2_Pin|Limit1_Pin|IR11_Pin
                          |IR10_Pin|IR9_Pin|IR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_GPIO_Init+0x1fc>)
 80006d4:	f000 fd5c 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Stepper1_step_Pin;
 80006d8:	2304      	movs	r3, #4
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Stepper1_step_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_GPIO_Init+0x1f8>)
 80006f0:	f000 fd4e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Stepper1_EN_Pin;
 80006f4:	2308      	movs	r3, #8
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Stepper1_EN_GPIO_Port, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_GPIO_Init+0x1fc>)
 800070c:	f000 fd40 	bl	8001190 <HAL_GPIO_Init>

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	48000800 	.word	0x48000800
 8000720:	48000c00 	.word	0x48000c00
 8000724:	48000400 	.word	0x48000400
 8000728:	48001c00 	.word	0x48001c00

0800072c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f000 fed4 	bl	8001514 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f9fd 	bl	8000b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f000 ff5a 	bl	8001632 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f9f4 	bl	8000b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f000 ff9c 	bl	80016c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f9eb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20001a7c 	.word	0x20001a7c
 80007a4:	40005400 	.word	0x40005400
 80007a8:	10909cec 	.word	0x10909cec

080007ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <MX_I2C2_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_I2C2_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_I2C2_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <MX_I2C2_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_I2C2_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MX_I2C2_Init+0x74>)
 80007e8:	f000 fe94 	bl	8001514 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 f9bd 	bl	8000b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	; (8000820 <MX_I2C2_Init+0x74>)
 80007fa:	f000 ff1a 	bl	8001632 <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 f9b4 	bl	8000b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2C2_Init+0x74>)
 800080c:	f000 ff5c 	bl	80016c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 f9ab 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20001ac8 	.word	0x20001ac8
 8000824:	40005800 	.word	0x40005800
 8000828:	10909cec 	.word	0x10909cec

0800082c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_I2C3_Init+0x78>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <MX_I2C3_Init+0x7c>)
 800083a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_I2C3_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <MX_I2C3_Init+0x74>)
 8000868:	f000 fe54 	bl	8001514 <HAL_I2C_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000872:	f000 f97d 	bl	8000b70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4809      	ldr	r0, [pc, #36]	; (80008a0 <MX_I2C3_Init+0x74>)
 800087a:	f000 feda 	bl	8001632 <HAL_I2CEx_ConfigAnalogFilter>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000884:	f000 f974 	bl	8000b70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_I2C3_Init+0x74>)
 800088c:	f000 ff1c 	bl	80016c8 <HAL_I2CEx_ConfigDigitalFilter>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 f96b 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001a30 	.word	0x20001a30
 80008a4:	40005c00 	.word	0x40005c00
 80008a8:	10909cec 	.word	0x10909cec

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0b0      	sub	sp, #192	; 0xc0
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	2288      	movs	r2, #136	; 0x88
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 ffcf 	bl	8006870 <memset>
  if(i2cHandle->Instance==I2C1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a63      	ldr	r2, [pc, #396]	; (8000a64 <HAL_I2C_MspInit+0x1b8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d13b      	bne.n	8000954 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008dc:	2340      	movs	r3, #64	; 0x40
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fdbb 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f000 f93c 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b5b      	ldr	r3, [pc, #364]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a5a      	ldr	r2, [pc, #360]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b58      	ldr	r3, [pc, #352]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TOF_SCL_Pin|TOF_SDA_Pin;
 8000910:	23c0      	movs	r3, #192	; 0xc0
 8000912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000916:	2312      	movs	r3, #18
 8000918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000928:	2304      	movs	r3, #4
 800092a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000932:	4619      	mov	r1, r3
 8000934:	484d      	ldr	r0, [pc, #308]	; (8000a6c <HAL_I2C_MspInit+0x1c0>)
 8000936:	f000 fc2b 	bl	8001190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800093a:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000944:	6593      	str	r3, [r2, #88]	; 0x58
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000952:	e082      	b.n	8000a5a <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a45      	ldr	r2, [pc, #276]	; (8000a70 <HAL_I2C_MspInit+0x1c4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d13c      	bne.n	80009d8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000962:	2300      	movs	r3, #0
 8000964:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fd7a 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000976:	f000 f8fb 	bl	8000b70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a3a      	ldr	r2, [pc, #232]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b38      	ldr	r3, [pc, #224]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ACC_SCL_Pin|ACC_SDA_Pin;
 8000992:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	2312      	movs	r3, #18
 800099c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80009ac:	2304      	movs	r3, #4
 80009ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009b6:	4619      	mov	r1, r3
 80009b8:	482c      	ldr	r0, [pc, #176]	; (8000a6c <HAL_I2C_MspInit+0x1c0>)
 80009ba:	f000 fbe9 	bl	8001190 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 80009c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
}
 80009d6:	e040      	b.n	8000a5a <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <HAL_I2C_MspInit+0x1c8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d13b      	bne.n	8000a5a <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80009e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fd37 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80009fc:	f000 f8b8 	bl	8000b70 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo_SCL_Pin|Servo_SDA_Pin;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a30:	2304      	movs	r3, #4
 8000a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <HAL_I2C_MspInit+0x1cc>)
 8000a3e:	f000 fba7 	bl	8001190 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_I2C_MspInit+0x1bc>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	37c0      	adds	r7, #192	; 0xc0
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	40005800 	.word	0x40005800
 8000a74:	40005c00 	.word	0x40005c00
 8000a78:	48000800 	.word	0x48000800

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a80:	f000 fa64 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a84:	f000 f811 	bl	8000aaa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a88:	f7ff fd4e 	bl	8000528 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a8c:	f7ff fe4e 	bl	800072c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a90:	f7ff fe8c 	bl	80007ac <MX_I2C2_Init>
  MX_I2C3_Init();
 8000a94:	f7ff feca 	bl	800082c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000a98:	f000 f920 	bl	8000cdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a9c:	f003 f93c 	bl	8003d18 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000aa0:	f7ff fd12 	bl	80004c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000aa4:	f003 f95c 	bl	8003d60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2c>

08000aaa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b096      	sub	sp, #88	; 0x58
 8000aae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2244      	movs	r2, #68	; 0x44
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 fed9 	bl	8006870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000acc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ad0:	f000 fe54 	bl	800177c <HAL_PWREx_ControlVoltageScaling>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ada:	f000 f849 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000af8:	230a      	movs	r3, #10
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000afc:	2307      	movs	r3, #7
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fe8b 	bl	8001828 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b18:	f000 f82a 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2303      	movs	r3, #3
 8000b22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	2104      	movs	r1, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fa5d 	bl	8001ff4 <HAL_RCC_ClockConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b40:	f000 f816 	bl	8000b70 <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3758      	adds	r7, #88	; 0x58
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f000 fa15 	bl	8000f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40001000 	.word	0x40001000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	f06f 0001 	mvn.w	r0, #1
 8000bba:	f000 fabf 	bl	800113c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2036      	movs	r0, #54	; 0x36
 8000be2:	f000 faab 	bl	800113c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be6:	2036      	movs	r0, #54	; 0x36
 8000be8:	f000 fac4 	bl	8001174 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_InitTick+0x9c>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_InitTick+0x9c>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_InitTick+0x9c>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c04:	f107 0210 	add.w	r2, r7, #16
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fb96 	bl	8002340 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c14:	f001 fb68 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8000c18:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1c:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <HAL_InitTick+0xa0>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3b01      	subs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c4a:	f002 f8c7 	bl	8002ddc <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d104      	bne.n	8000c5e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c56:	f002 f923 	bl	8002ea0 <HAL_TIM_Base_Start_IT>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	20001b14 	.word	0x20001b14
 8000c74:	40001000 	.word	0x40001000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM6_DAC_IRQHandler+0x10>)
 8000caa:	f002 f969 	bl	8002f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20001b14 	.word	0x20001b14

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <MX_USART2_UART_Init+0x5c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d20:	f002 fb2e 	bl	8003380 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f7ff ff21 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20001b60 	.word	0x20001b60
 8000d38:	40004400 	.word	0x40004400

08000d3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ac      	sub	sp, #176	; 0xb0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2288      	movs	r2, #136	; 0x88
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fd87 	bl	8006870 <memset>
  if(uartHandle->Instance==USART2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <HAL_UART_MspInit+0xb0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d13b      	bne.n	8000de4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fb73 	bl	8002464 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff fef4 	bl	8000b70 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	6593      	str	r3, [r2, #88]	; 0x58
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000db8:	230c      	movs	r3, #12
 8000dba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f000 f9d6 	bl	8001190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000de4:	bf00      	nop
 8000de6:	37b0      	adds	r7, #176	; 0xb0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40004400 	.word	0x40004400
 8000df0:	40021000 	.word	0x40021000

08000df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ff5e 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f005 fcf3 	bl	800680c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e26:	f7ff fe29 	bl	8000a7c <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e38:	08006b54 	.word	0x08006b54
  ldr r2, =_sbss
 8000e3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e40:	20001c28 	.word	0x20001c28

08000e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>

08000e46 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d104      	bne.n	8000e5e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
 8000e58:	f7ff fe8a 	bl	8000b70 <Error_Handler>
 8000e5c:	e7fe      	b.n	8000e5c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7a1b      	ldrb	r3, [r3, #8]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d904      	bls.n	8000e70 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e66:	b672      	cpsid	i
}
 8000e68:	bf00      	nop
 8000e6a:	f7ff fe81 	bl	8000b70 <Error_Handler>
 8000e6e:	e7fe      	b.n	8000e6e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7a1b      	ldrb	r3, [r3, #8]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	b2d1      	uxtb	r1, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	7211      	strb	r1, [r2, #8]
 8000e7c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000e7e:	f3ef 8211 	mrs	r2, BASEPRI
 8000e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	60fa      	str	r2, [r7, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d104      	bne.n	8000ebe <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
 8000eb8:	f7ff fe5a 	bl	8000b70 <Error_Handler>
 8000ebc:	e7fe      	b.n	8000ebc <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7a1b      	ldrb	r3, [r3, #8]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7a1b      	ldrb	r3, [r3, #8]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d904      	bls.n	8000edc <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed2:	b672      	cpsid	i
}
 8000ed4:	bf00      	nop
 8000ed6:	f7ff fe4b 	bl	8000b70 <Error_Handler>
 8000eda:	e7fe      	b.n	8000eda <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000ef0:	bf00      	nop
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d104      	bne.n	8000f12 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
 8000f0c:	f7ff fe30 	bl	8000b70 <Error_Handler>
 8000f10:	e7fe      	b.n	8000f10 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff96 	bl	8000e46 <stm32_lock_acquire>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d104      	bne.n	8000f3a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
 8000f34:	f7ff fe1c 	bl	8000b70 <Error_Handler>
 8000f38:	e7fe      	b.n	8000f38 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffb2 	bl	8000ea6 <stm32_lock_release>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_Init+0x3c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_Init+0x3c>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f8df 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f68:	200f      	movs	r0, #15
 8000f6a:	f7ff fe2f 	bl	8000bcc <HAL_InitTick>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	e001      	b.n	8000f7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7a:	f7ff fdff 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40022000 	.word	0x40022000

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20001be4 	.word	0x20001be4

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20001be4 	.word	0x20001be4

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800119e:	e17f      	b.n	80014a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2101      	movs	r1, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	4013      	ands	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8171 	beq.w	800149a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d005      	beq.n	80011d0 <HAL_GPIO_Init+0x40>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d130      	bne.n	8001232 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001206:	2201      	movs	r2, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 0201 	and.w	r2, r3, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b03      	cmp	r3, #3
 800123c:	d118      	bne.n	8001270 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001244:	2201      	movs	r2, #1
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	f003 0201 	and.w	r2, r3, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b03      	cmp	r3, #3
 800127a:	d017      	beq.n	80012ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d123      	bne.n	8001300 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	6939      	ldr	r1, [r7, #16]
 80012fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 80ac 	beq.w	800149a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	4a5e      	ldr	r2, [pc, #376]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6613      	str	r3, [r2, #96]	; 0x60
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800135a:	4a5a      	ldr	r2, [pc, #360]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001384:	d025      	beq.n	80013d2 <HAL_GPIO_Init+0x242>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_GPIO_Init+0x338>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <HAL_GPIO_Init+0x33c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4d      	ldr	r2, [pc, #308]	; (80014d0 <HAL_GPIO_Init+0x340>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4c      	ldr	r2, [pc, #304]	; (80014d4 <HAL_GPIO_Init+0x344>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_GPIO_Init+0x348>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_GPIO_Init+0x34c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x22a>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00c      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00a      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013be:	2305      	movs	r3, #5
 80013c0:	e008      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e006      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e004      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x244>
 80013d2:	2300      	movs	r3, #0
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	f002 0203 	and.w	r2, r2, #3
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	4093      	lsls	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e4:	4937      	ldr	r1, [pc, #220]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_GPIO_Init+0x350>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001440:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_GPIO_Init+0x350>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_GPIO_Init+0x350>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f47f ae78 	bne.w	80011a0 <HAL_GPIO_Init+0x10>
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	48001000 	.word	0x48001000
 80014d8:	48001400 	.word	0x48001400
 80014dc:	48001800 	.word	0x48001800
 80014e0:	40010400 	.word	0x40010400

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001500:	e002      	b.n	8001508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001502:	887a      	ldrh	r2, [r7, #2]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e081      	b.n	800162a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff f9b6 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001564:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e006      	b.n	800159c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800159a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d104      	bne.n	80015ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69d9      	ldr	r1, [r3, #28]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b20      	cmp	r3, #32
 8001646:	d138      	bne.n	80016ba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001652:	2302      	movs	r3, #2
 8001654:	e032      	b.n	80016bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2224      	movs	r2, #36	; 0x24
 8001662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001684:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b20      	cmp	r3, #32
 80016dc:	d139      	bne.n	8001752 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e033      	b.n	8001754 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800171a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2220      	movs	r2, #32
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
  }
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_PWREx_GetVoltageRange+0x18>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800178a:	d130      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800178c:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001798:	d038      	beq.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2232      	movs	r2, #50	; 0x32
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	3301      	adds	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c0:	e002      	b.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d4:	d102      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f2      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e8:	d110      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e00f      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	d007      	beq.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000
 8001820:	20000000 	.word	0x20000000
 8001824:	431bde83 	.word	0x431bde83

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e3d4      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4ba1      	ldr	r3, [pc, #644]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001844:	4b9e      	ldr	r3, [pc, #632]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80e4 	beq.w	8001a24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_RCC_OscConfig+0x4a>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	f040 808b 	bne.w	8001980 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 8087 	bne.w	8001980 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001872:	4b93      	ldr	r3, [pc, #588]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x62>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3ac      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b8c      	ldr	r3, [pc, #560]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <HAL_RCC_OscConfig+0x7c>
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a2:	e005      	b.n	80018b0 <HAL_RCC_OscConfig+0x88>
 80018a4:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d223      	bcs.n	80018fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fd73 	bl	80023a4 <RCC_SetFlashLatencyFromMSIRange>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e38d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7c      	ldr	r2, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4977      	ldr	r1, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	4972      	ldr	r1, [pc, #456]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e025      	b.n	8001948 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6f      	ldr	r2, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	496a      	ldr	r1, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191a:	4b69      	ldr	r3, [pc, #420]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	4965      	ldr	r1, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fd33 	bl	80023a4 <RCC_SetFlashLatencyFromMSIRange>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e34d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001948:	f000 fc36 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	495a      	ldr	r1, [pc, #360]	; (8001ac4 <HAL_RCC_OscConfig+0x29c>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	4a58      	ldr	r2, [pc, #352]	; (8001ac8 <HAL_RCC_OscConfig+0x2a0>)
 8001966:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_RCC_OscConfig+0x2a4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f92d 	bl	8000bcc <HAL_InitTick>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d052      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	e331      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d032      	beq.n	80019ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb0e 	bl	8000fb4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199c:	f7ff fb0a 	bl	8000fb4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e31a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ae:	4b44      	ldr	r3, [pc, #272]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a40      	ldr	r2, [pc, #256]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b3e      	ldr	r3, [pc, #248]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	493b      	ldr	r1, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d8:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	4936      	ldr	r1, [pc, #216]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e01a      	b.n	8001a24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a33      	ldr	r2, [pc, #204]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fadb 	bl	8000fb4 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a02:	f7ff fad7 	bl	8000fb4 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e2e7      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x1da>
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d074      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x21a>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d10e      	bne.n	8001a5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d064      	beq.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d160      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e2c4      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x24a>
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e01d      	b.n	8001aae <HAL_RCC_OscConfig+0x286>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7a:	d10c      	bne.n	8001a96 <HAL_RCC_OscConfig+0x26e>
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e00b      	b.n	8001aae <HAL_RCC_OscConfig+0x286>
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d01c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab6:	f7ff fa7d 	bl	8000fb4 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abc:	e011      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2ba>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08006a9c 	.word	0x08006a9c
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fa70 	bl	8000fb4 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e280      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae2:	4baf      	ldr	r3, [pc, #700]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2a8>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fa60 	bl	8000fb4 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fa5c 	bl	8000fb4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e26c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0a:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2d0>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d060      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x310>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d116      	bne.n	8001b66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	4b99      	ldr	r3, [pc, #612]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x328>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e249      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b93      	ldr	r3, [pc, #588]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	4990      	ldr	r1, [pc, #576]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b64:	e040      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d023      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6e:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a8b      	ldr	r2, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fa1b 	bl	8000fb4 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fa17 	bl	8000fb4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e227      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b94:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	497c      	ldr	r1, [pc, #496]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e018      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b7a      	ldr	r3, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f9f7 	bl	8000fb4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff f9f3 	bl	8000fb4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e203      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bdc:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c02:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f9d2 	bl	8000fb4 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff f9ce 	bl	8000fb4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1de      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c26:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ef      	beq.n	8001c14 <HAL_RCC_OscConfig+0x3ec>
 8001c34:	e01b      	b.n	8001c6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c36:	4b5a      	ldr	r3, [pc, #360]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3c:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f9b5 	bl	8000fb4 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f9b1 	bl	8000fb4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1c1      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ef      	bne.n	8001c4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80a6 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	4a43      	ldr	r2, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6593      	str	r3, [r2, #88]	; 0x58
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca8:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_OscConfig+0x57c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d118      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb4:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x57c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x57c>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f978 	bl	8000fb4 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7ff f974 	bl	8000fb4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e184      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_RCC_OscConfig+0x57c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4d8>
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfe:	e024      	b.n	8001d4a <HAL_RCC_OscConfig+0x522>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d110      	bne.n	8001d2a <HAL_RCC_OscConfig+0x502>
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d28:	e00f      	b.n	8001d4a <HAL_RCC_OscConfig+0x522>
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d42:	f023 0304 	bic.w	r3, r3, #4
 8001d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d52:	f7ff f92f 	bl	8000fb4 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff f92b 	bl	8000fb4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e139      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_OscConfig+0x578>)
 8001d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ed      	beq.n	8001d5a <HAL_RCC_OscConfig+0x532>
 8001d7e:	e01a      	b.n	8001db6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f918 	bl	8000fb4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d86:	e00f      	b.n	8001da8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7ff f914 	bl	8000fb4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d906      	bls.n	8001da8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e122      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da8:	4b90      	ldr	r3, [pc, #576]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e8      	bne.n	8001d88 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8108 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	f040 80d0 	bne.w	8001f7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ddc:	4b83      	ldr	r3, [pc, #524]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d130      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d127      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11f      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e1c:	2a07      	cmp	r2, #7
 8001e1e:	bf14      	ite	ne
 8001e20:	2201      	movne	r2, #1
 8001e22:	2200      	moveq	r2, #0
 8001e24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d113      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	3b01      	subs	r3, #1
 8001e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d06e      	beq.n	8001f30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d069      	beq.n	8001f2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e64:	4b61      	ldr	r3, [pc, #388]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b7      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e74:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e80:	f7ff f898 	bl	8000fb4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f894 	bl	8000fb4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0a4      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	4b54      	ldr	r3, [pc, #336]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	4b51      	ldr	r3, [pc, #324]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_RCC_OscConfig+0x7c8>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	3a01      	subs	r2, #1
 8001ecc:	0552      	lsls	r2, r2, #21
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ed4:	0852      	lsrs	r2, r2, #1
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	0652      	lsls	r2, r2, #25
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ee0:	0912      	lsrs	r2, r2, #4
 8001ee2:	0452      	lsls	r2, r2, #17
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	4941      	ldr	r1, [pc, #260]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001eec:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef8:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f04:	f7ff f856 	bl	8000fb4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f852 	bl	8000fb4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e062      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2a:	e05a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e059      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d152      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f54:	f7ff f82e 	bl	8000fb4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f82a 	bl	8000fb4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e03a      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x734>
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d02d      	beq.n	8001fde <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4a13      	ldr	r2, [pc, #76]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001fa0:	f023 0303 	bic.w	r3, r3, #3
 8001fa4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001fac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fffd 	bl	8000fb4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fff9 	bl	8000fb4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e009      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x7c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x796>
 8001fdc:	e001      	b.n	8001fe2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	f99d808c 	.word	0xf99d808c

08001ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0c8      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4961      	ldr	r1, [pc, #388]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b0      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d04c      	beq.n	80020de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d107      	bne.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204c:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d121      	bne.n	800209c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e09e      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d107      	bne.n	8002074 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d115      	bne.n	800209c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e092      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207c:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e086      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e07e      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	493f      	ldr	r1, [pc, #252]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ae:	f7fe ff81 	bl	8000fb4 <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7fe ff7d 	bl	8000fb4 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e066      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 020c 	and.w	r2, r3, #12
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	429a      	cmp	r2, r3
 80020dc:	d1eb      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ea:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	492c      	ldr	r1, [pc, #176]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d210      	bcs.n	800212c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4924      	ldr	r1, [pc, #144]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x1b0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e036      	b.n	800219a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4918      	ldr	r1, [pc, #96]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4910      	ldr	r1, [pc, #64]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216a:	f000 f825 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_ClockConfig+0x1b4>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490c      	ldr	r1, [pc, #48]	; (80021ac <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fd1c 	bl	8000bcc <HAL_InitTick>
 8002194:	4603      	mov	r3, r0
 8002196:	72fb      	strb	r3, [r7, #11]

  return status;
 8002198:	7afb      	ldrb	r3, [r7, #11]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08006a9c 	.word	0x08006a9c
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d121      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11e      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e005      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d102      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e004      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 800223e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d134      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0xa6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xac>
 800225c:	e005      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002260:	617b      	str	r3, [r7, #20]
      break;
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002266:	617b      	str	r3, [r7, #20]
      break;
 8002268:	e002      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	3301      	adds	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	fb02 f203 	mul.w	r2, r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	0e5b      	lsrs	r3, r3, #25
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	3301      	adds	r3, #1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b0:	69bb      	ldr	r3, [r7, #24]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	08006ab4 	.word	0x08006ab4
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08006aac 	.word	0x08006aac

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002318:	f7ff ffda 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK2Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08006aac 	.word	0x08006aac

08002340 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	220f      	movs	r2, #15
 800234e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_GetClockConfig+0x5c>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <HAL_RCC_GetClockConfig+0x60>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0207 	and.w	r2, r3, #7
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	601a      	str	r2, [r3, #0]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40022000 	.word	0x40022000

080023a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023bc:	f7ff f9d0 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 80023c0:	6178      	str	r0, [r7, #20]
 80023c2:	e014      	b.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023dc:	f7ff f9c0 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 80023e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a1d      	ldr	r2, [pc, #116]	; (800245c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f4:	d10b      	bne.n	800240e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d919      	bls.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002400:	d902      	bls.n	8002408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002402:	2302      	movs	r3, #2
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	e013      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002408:	2301      	movs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	e010      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d902      	bls.n	800241a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002414:	2303      	movs	r3, #3
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e00a      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d102      	bne.n	8002426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002420:	2302      	movs	r3, #2
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e004      	b.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b70      	cmp	r3, #112	; 0x70
 800242a:	d101      	bne.n	8002430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800242c:	2301      	movs	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	4909      	ldr	r1, [pc, #36]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	40022000 	.word	0x40022000

08002464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800246c:	2300      	movs	r3, #0
 800246e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002470:	2300      	movs	r3, #0
 8002472:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247c:	2b00      	cmp	r3, #0
 800247e:	d041      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002484:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002488:	d02a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800248a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800248e:	d824      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002494:	d008      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800249a:	d81e      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d010      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024a6:	e018      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a8:	4b86      	ldr	r3, [pc, #536]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a85      	ldr	r2, [pc, #532]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b4:	e015      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fabb 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80024c2:	4603      	mov	r3, r0
 80024c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c6:	e00c      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3320      	adds	r3, #32
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fba6 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d8:	e003      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	74fb      	strb	r3, [r7, #19]
      break;
 80024de:	e000      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e8:	4b76      	ldr	r3, [pc, #472]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f6:	4973      	ldr	r1, [pc, #460]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024fe:	e001      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d041      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002518:	d02a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800251a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800251e:	d824      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002524:	d008      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800252a:	d81e      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002534:	d010      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002536:	e018      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002538:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002544:	e015      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3304      	adds	r3, #4
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fa73 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002556:	e00c      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3320      	adds	r3, #32
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fb5e 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002568:	e003      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	74fb      	strb	r3, [r7, #19]
      break;
 800256e:	e000      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002578:	4b52      	ldr	r3, [pc, #328]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002586:	494f      	ldr	r1, [pc, #316]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800258e:	e001      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a0 	beq.w	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
 80025c8:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fce6 	bl	8000fb4 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ea:	e009      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe fce2 	bl	8000fb4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d902      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	74fb      	strb	r3, [r7, #19]
        break;
 80025fe:	e005      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d15c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01f      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	d019      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fca1 	bl	8000fb4 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002674:	e00b      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe fc9d 	bl	8000fb4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d902      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	74fb      	strb	r3, [r7, #19]
            break;
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ec      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b2:	4904      	ldr	r1, [pc, #16]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026ba:	e009      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	74bb      	strb	r3, [r7, #18]
 80026c0:	e006      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d0:	7c7b      	ldrb	r3, [r7, #17]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	4a9d      	ldr	r2, [pc, #628]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ee:	4b98      	ldr	r3, [pc, #608]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f023 0203 	bic.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	4994      	ldr	r1, [pc, #592]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f023 020c 	bic.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	498c      	ldr	r1, [pc, #560]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4983      	ldr	r1, [pc, #524]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002754:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	497b      	ldr	r1, [pc, #492]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002784:	4972      	ldr	r1, [pc, #456]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002798:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	496a      	ldr	r1, [pc, #424]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	4961      	ldr	r1, [pc, #388]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027dc:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	4959      	ldr	r1, [pc, #356]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fe:	4b54      	ldr	r3, [pc, #336]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	4950      	ldr	r1, [pc, #320]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	4948      	ldr	r1, [pc, #288]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002842:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	493f      	ldr	r1, [pc, #252]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d028      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002864:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002882:	d106      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800288e:	60d3      	str	r3, [r2, #12]
 8002890:	e011      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800289a:	d10c      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2101      	movs	r1, #1
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f8c8 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	491f      	ldr	r1, [pc, #124]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e0:	d106      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e2:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ec:	60d3      	str	r3, [r2, #12]
 80028ee:	e011      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2101      	movs	r1, #1
 8002900:	4618      	mov	r0, r3
 8002902:	f000 f899 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d02b      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293e:	d109      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a02      	ldr	r2, [pc, #8]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
 800294c:	e014      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295c:	d10c      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	2101      	movs	r1, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f867 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 800296a:	4603      	mov	r3, r0
 800296c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02f      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002992:	4928      	ldr	r1, [pc, #160]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029a2:	d10d      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f844 	bl	8002a38 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d014      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	74bb      	strb	r3, [r7, #18]
 80029be:	e011      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3320      	adds	r3, #32
 80029ce:	2102      	movs	r1, #2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f925 	bl	8002c20 <RCCEx_PLLSAI2_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fe:	490d      	ldr	r1, [pc, #52]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a22:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000

08002a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a46:	4b75      	ldr	r3, [pc, #468]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d018      	beq.n	8002a84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a52:	4b72      	ldr	r3, [pc, #456]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0203 	and.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d10d      	bne.n	8002a7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
       ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
       ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d047      	beq.n	8002b0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	e044      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d018      	beq.n	8002abe <RCCEx_PLLSAI1_Config+0x86>
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d825      	bhi.n	8002adc <RCCEx_PLLSAI1_Config+0xa4>
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d002      	beq.n	8002a9a <RCCEx_PLLSAI1_Config+0x62>
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d009      	beq.n	8002aac <RCCEx_PLLSAI1_Config+0x74>
 8002a98:	e020      	b.n	8002adc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d11d      	bne.n	8002ae2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aaa:	e01a      	b.n	8002ae2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abc:	e013      	b.n	8002ae6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d109      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ada:	e006      	b.n	8002aea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e004      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e002      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e000      	b.n	8002aec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	430b      	orrs	r3, r1
 8002b08:	4944      	ldr	r1, [pc, #272]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d17d      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b14:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a40      	ldr	r2, [pc, #256]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fa48 	bl	8000fb4 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b26:	e009      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b28:	f7fe fa44 	bl	8000fb4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d902      	bls.n	8002b3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	73fb      	strb	r3, [r7, #15]
        break;
 8002b3a:	e005      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ef      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d160      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d111      	bne.n	8002b78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6892      	ldr	r2, [r2, #8]
 8002b64:	0211      	lsls	r1, r2, #8
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	0912      	lsrs	r2, r2, #4
 8002b6c:	0452      	lsls	r2, r2, #17
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	492a      	ldr	r1, [pc, #168]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	610b      	str	r3, [r1, #16]
 8002b76:	e027      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d112      	bne.n	8002ba4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7e:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	0211      	lsls	r1, r2, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6912      	ldr	r2, [r2, #16]
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0552      	lsls	r2, r2, #21
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	491f      	ldr	r1, [pc, #124]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	610b      	str	r3, [r1, #16]
 8002ba2:	e011      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6952      	ldr	r2, [r2, #20]
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0652      	lsls	r2, r2, #25
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4916      	ldr	r1, [pc, #88]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f9ee 	bl	8000fb4 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bdc:	f7fe f9ea 	bl	8000fb4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
          break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d018      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0203 	and.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d10d      	bne.n	8002c66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
       ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d047      	beq.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e044      	b.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d018      	beq.n	8002ca6 <RCCEx_PLLSAI2_Config+0x86>
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d825      	bhi.n	8002cc4 <RCCEx_PLLSAI2_Config+0xa4>
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <RCCEx_PLLSAI2_Config+0x62>
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d009      	beq.n	8002c94 <RCCEx_PLLSAI2_Config+0x74>
 8002c80:	e020      	b.n	8002cc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11d      	bne.n	8002cca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c92:	e01a      	b.n	8002cca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c94:	4b50      	ldr	r3, [pc, #320]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d116      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e013      	b.n	8002cce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10f      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cc2:	e006      	b.n	8002cd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e004      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	4939      	ldr	r1, [pc, #228]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d167      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a35      	ldr	r2, [pc, #212]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe f954 	bl	8000fb4 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d0e:	e009      	b.n	8002d24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d10:	f7fe f950 	bl	8000fb4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	73fb      	strb	r3, [r7, #15]
        break;
 8002d22:	e005      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ef      	bne.n	8002d10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d14a      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d3c:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6892      	ldr	r2, [r2, #8]
 8002d4c:	0211      	lsls	r1, r2, #8
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68d2      	ldr	r2, [r2, #12]
 8002d52:	0912      	lsrs	r2, r2, #4
 8002d54:	0452      	lsls	r2, r2, #17
 8002d56:	430a      	orrs	r2, r1
 8002d58:	491f      	ldr	r1, [pc, #124]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	614b      	str	r3, [r1, #20]
 8002d5e:	e011      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6892      	ldr	r2, [r2, #8]
 8002d70:	0211      	lsls	r1, r2, #8
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6912      	ldr	r2, [r2, #16]
 8002d76:	0852      	lsrs	r2, r2, #1
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	0652      	lsls	r2, r2, #25
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7fe f910 	bl	8000fb4 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d96:	e009      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d98:	f7fe f90c 	bl	8000fb4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d902      	bls.n	8002dac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	73fb      	strb	r3, [r7, #15]
          break;
 8002daa:	e005      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4904      	ldr	r1, [pc, #16]	; (8002dd8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e049      	b.n	8002e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f841 	bl	8002e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 f9f8 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e04f      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d018      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d115      	bne.n	8002f42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d015      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0xb4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d011      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	e008      	b.n	8002f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40000c00 	.word	0x40000c00
 8002f74:	40013400 	.word	0x40013400
 8002f78:	40014000 	.word	0x40014000
 8002f7c:	00010007 	.word	0x00010007

08002f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0202 	mvn.w	r2, #2
 8002fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f905 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8f7 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f908 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0204 	mvn.w	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8db 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8cd 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8de 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b08      	cmp	r3, #8
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0208 	mvn.w	r2, #8
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2204      	movs	r2, #4
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8b1 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8a3 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f8b4 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b10      	cmp	r3, #16
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2208      	movs	r2, #8
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f887 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f879 	bl	80031be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f88a 	bl	80031e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10e      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0201 	mvn.w	r2, #1
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fd24 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b80      	cmp	r3, #128	; 0x80
 800311e:	d107      	bne.n	8003130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f914 	bl	8003358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313e:	d10e      	bne.n	800315e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b80      	cmp	r3, #128	; 0x80
 800314c:	d107      	bne.n	800315e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f907 	bl	800336c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d10e      	bne.n	800318a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d107      	bne.n	800318a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f838 	bl	80031fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b20      	cmp	r3, #32
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0220 	mvn.w	r2, #32
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f8c7 	bl	8003344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a40      	ldr	r2, [pc, #256]	; (8003324 <TIM_Base_SetConfig+0x114>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d00f      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3d      	ldr	r2, [pc, #244]	; (8003328 <TIM_Base_SetConfig+0x118>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3c      	ldr	r2, [pc, #240]	; (800332c <TIM_Base_SetConfig+0x11c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3b      	ldr	r2, [pc, #236]	; (8003330 <TIM_Base_SetConfig+0x120>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <TIM_Base_SetConfig+0x124>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2f      	ldr	r2, [pc, #188]	; (8003324 <TIM_Base_SetConfig+0x114>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d01b      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <TIM_Base_SetConfig+0x118>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2b      	ldr	r2, [pc, #172]	; (800332c <TIM_Base_SetConfig+0x11c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <TIM_Base_SetConfig+0x120>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a29      	ldr	r2, [pc, #164]	; (8003334 <TIM_Base_SetConfig+0x124>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a28      	ldr	r2, [pc, #160]	; (8003338 <TIM_Base_SetConfig+0x128>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <TIM_Base_SetConfig+0x12c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <TIM_Base_SetConfig+0x130>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a10      	ldr	r2, [pc, #64]	; (8003324 <TIM_Base_SetConfig+0x114>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00f      	beq.n	8003308 <TIM_Base_SetConfig+0xf8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a12      	ldr	r2, [pc, #72]	; (8003334 <TIM_Base_SetConfig+0x124>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <TIM_Base_SetConfig+0xf8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <TIM_Base_SetConfig+0x128>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_Base_SetConfig+0xf8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a10      	ldr	r2, [pc, #64]	; (800333c <TIM_Base_SetConfig+0x12c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_Base_SetConfig+0xf8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0f      	ldr	r2, [pc, #60]	; (8003340 <TIM_Base_SetConfig+0x130>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	615a      	str	r2, [r3, #20]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e040      	b.n	8003414 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fcca 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f82c 	bl	800341c <UART_SetConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e022      	b.n	8003414 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 faaa 	bl	8003930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fb31 	bl	8003a74 <UART_CheckIdleState>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	b5b0      	push	{r4, r5, r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4313      	orrs	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4bad      	ldr	r3, [pc, #692]	; (80036fc <UART_SetConfig+0x2e0>)
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	69f9      	ldr	r1, [r7, #28]
 8003450:	430b      	orrs	r3, r1
 8003452:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4aa2      	ldr	r2, [pc, #648]	; (8003700 <UART_SetConfig+0x2e4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	430a      	orrs	r2, r1
 8003496:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a99      	ldr	r2, [pc, #612]	; (8003704 <UART_SetConfig+0x2e8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d121      	bne.n	80034e6 <UART_SetConfig+0xca>
 80034a2:	4b99      	ldr	r3, [pc, #612]	; (8003708 <UART_SetConfig+0x2ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d817      	bhi.n	80034e0 <UART_SetConfig+0xc4>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <UART_SetConfig+0x9c>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034c9 	.word	0x080034c9
 80034bc:	080034d5 	.word	0x080034d5
 80034c0:	080034cf 	.word	0x080034cf
 80034c4:	080034db 	.word	0x080034db
 80034c8:	2301      	movs	r3, #1
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	e0e7      	b.n	800369e <UART_SetConfig+0x282>
 80034ce:	2302      	movs	r3, #2
 80034d0:	76fb      	strb	r3, [r7, #27]
 80034d2:	e0e4      	b.n	800369e <UART_SetConfig+0x282>
 80034d4:	2304      	movs	r3, #4
 80034d6:	76fb      	strb	r3, [r7, #27]
 80034d8:	e0e1      	b.n	800369e <UART_SetConfig+0x282>
 80034da:	2308      	movs	r3, #8
 80034dc:	76fb      	strb	r3, [r7, #27]
 80034de:	e0de      	b.n	800369e <UART_SetConfig+0x282>
 80034e0:	2310      	movs	r3, #16
 80034e2:	76fb      	strb	r3, [r7, #27]
 80034e4:	e0db      	b.n	800369e <UART_SetConfig+0x282>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a88      	ldr	r2, [pc, #544]	; (800370c <UART_SetConfig+0x2f0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d132      	bne.n	8003556 <UART_SetConfig+0x13a>
 80034f0:	4b85      	ldr	r3, [pc, #532]	; (8003708 <UART_SetConfig+0x2ec>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d828      	bhi.n	8003550 <UART_SetConfig+0x134>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <UART_SetConfig+0xe8>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003539 	.word	0x08003539
 8003508:	08003551 	.word	0x08003551
 800350c:	08003551 	.word	0x08003551
 8003510:	08003551 	.word	0x08003551
 8003514:	08003545 	.word	0x08003545
 8003518:	08003551 	.word	0x08003551
 800351c:	08003551 	.word	0x08003551
 8003520:	08003551 	.word	0x08003551
 8003524:	0800353f 	.word	0x0800353f
 8003528:	08003551 	.word	0x08003551
 800352c:	08003551 	.word	0x08003551
 8003530:	08003551 	.word	0x08003551
 8003534:	0800354b 	.word	0x0800354b
 8003538:	2300      	movs	r3, #0
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	e0af      	b.n	800369e <UART_SetConfig+0x282>
 800353e:	2302      	movs	r3, #2
 8003540:	76fb      	strb	r3, [r7, #27]
 8003542:	e0ac      	b.n	800369e <UART_SetConfig+0x282>
 8003544:	2304      	movs	r3, #4
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e0a9      	b.n	800369e <UART_SetConfig+0x282>
 800354a:	2308      	movs	r3, #8
 800354c:	76fb      	strb	r3, [r7, #27]
 800354e:	e0a6      	b.n	800369e <UART_SetConfig+0x282>
 8003550:	2310      	movs	r3, #16
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e0a3      	b.n	800369e <UART_SetConfig+0x282>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6d      	ldr	r2, [pc, #436]	; (8003710 <UART_SetConfig+0x2f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d120      	bne.n	80035a2 <UART_SetConfig+0x186>
 8003560:	4b69      	ldr	r3, [pc, #420]	; (8003708 <UART_SetConfig+0x2ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800356a:	2b30      	cmp	r3, #48	; 0x30
 800356c:	d013      	beq.n	8003596 <UART_SetConfig+0x17a>
 800356e:	2b30      	cmp	r3, #48	; 0x30
 8003570:	d814      	bhi.n	800359c <UART_SetConfig+0x180>
 8003572:	2b20      	cmp	r3, #32
 8003574:	d009      	beq.n	800358a <UART_SetConfig+0x16e>
 8003576:	2b20      	cmp	r3, #32
 8003578:	d810      	bhi.n	800359c <UART_SetConfig+0x180>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <UART_SetConfig+0x168>
 800357e:	2b10      	cmp	r3, #16
 8003580:	d006      	beq.n	8003590 <UART_SetConfig+0x174>
 8003582:	e00b      	b.n	800359c <UART_SetConfig+0x180>
 8003584:	2300      	movs	r3, #0
 8003586:	76fb      	strb	r3, [r7, #27]
 8003588:	e089      	b.n	800369e <UART_SetConfig+0x282>
 800358a:	2302      	movs	r3, #2
 800358c:	76fb      	strb	r3, [r7, #27]
 800358e:	e086      	b.n	800369e <UART_SetConfig+0x282>
 8003590:	2304      	movs	r3, #4
 8003592:	76fb      	strb	r3, [r7, #27]
 8003594:	e083      	b.n	800369e <UART_SetConfig+0x282>
 8003596:	2308      	movs	r3, #8
 8003598:	76fb      	strb	r3, [r7, #27]
 800359a:	e080      	b.n	800369e <UART_SetConfig+0x282>
 800359c:	2310      	movs	r3, #16
 800359e:	76fb      	strb	r3, [r7, #27]
 80035a0:	e07d      	b.n	800369e <UART_SetConfig+0x282>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5b      	ldr	r2, [pc, #364]	; (8003714 <UART_SetConfig+0x2f8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d120      	bne.n	80035ee <UART_SetConfig+0x1d2>
 80035ac:	4b56      	ldr	r3, [pc, #344]	; (8003708 <UART_SetConfig+0x2ec>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035b6:	2bc0      	cmp	r3, #192	; 0xc0
 80035b8:	d013      	beq.n	80035e2 <UART_SetConfig+0x1c6>
 80035ba:	2bc0      	cmp	r3, #192	; 0xc0
 80035bc:	d814      	bhi.n	80035e8 <UART_SetConfig+0x1cc>
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d009      	beq.n	80035d6 <UART_SetConfig+0x1ba>
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	d810      	bhi.n	80035e8 <UART_SetConfig+0x1cc>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <UART_SetConfig+0x1b4>
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d006      	beq.n	80035dc <UART_SetConfig+0x1c0>
 80035ce:	e00b      	b.n	80035e8 <UART_SetConfig+0x1cc>
 80035d0:	2300      	movs	r3, #0
 80035d2:	76fb      	strb	r3, [r7, #27]
 80035d4:	e063      	b.n	800369e <UART_SetConfig+0x282>
 80035d6:	2302      	movs	r3, #2
 80035d8:	76fb      	strb	r3, [r7, #27]
 80035da:	e060      	b.n	800369e <UART_SetConfig+0x282>
 80035dc:	2304      	movs	r3, #4
 80035de:	76fb      	strb	r3, [r7, #27]
 80035e0:	e05d      	b.n	800369e <UART_SetConfig+0x282>
 80035e2:	2308      	movs	r3, #8
 80035e4:	76fb      	strb	r3, [r7, #27]
 80035e6:	e05a      	b.n	800369e <UART_SetConfig+0x282>
 80035e8:	2310      	movs	r3, #16
 80035ea:	76fb      	strb	r3, [r7, #27]
 80035ec:	e057      	b.n	800369e <UART_SetConfig+0x282>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a49      	ldr	r2, [pc, #292]	; (8003718 <UART_SetConfig+0x2fc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d125      	bne.n	8003644 <UART_SetConfig+0x228>
 80035f8:	4b43      	ldr	r3, [pc, #268]	; (8003708 <UART_SetConfig+0x2ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003606:	d017      	beq.n	8003638 <UART_SetConfig+0x21c>
 8003608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360c:	d817      	bhi.n	800363e <UART_SetConfig+0x222>
 800360e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003612:	d00b      	beq.n	800362c <UART_SetConfig+0x210>
 8003614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003618:	d811      	bhi.n	800363e <UART_SetConfig+0x222>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <UART_SetConfig+0x20a>
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d006      	beq.n	8003632 <UART_SetConfig+0x216>
 8003624:	e00b      	b.n	800363e <UART_SetConfig+0x222>
 8003626:	2300      	movs	r3, #0
 8003628:	76fb      	strb	r3, [r7, #27]
 800362a:	e038      	b.n	800369e <UART_SetConfig+0x282>
 800362c:	2302      	movs	r3, #2
 800362e:	76fb      	strb	r3, [r7, #27]
 8003630:	e035      	b.n	800369e <UART_SetConfig+0x282>
 8003632:	2304      	movs	r3, #4
 8003634:	76fb      	strb	r3, [r7, #27]
 8003636:	e032      	b.n	800369e <UART_SetConfig+0x282>
 8003638:	2308      	movs	r3, #8
 800363a:	76fb      	strb	r3, [r7, #27]
 800363c:	e02f      	b.n	800369e <UART_SetConfig+0x282>
 800363e:	2310      	movs	r3, #16
 8003640:	76fb      	strb	r3, [r7, #27]
 8003642:	e02c      	b.n	800369e <UART_SetConfig+0x282>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <UART_SetConfig+0x2e4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d125      	bne.n	800369a <UART_SetConfig+0x27e>
 800364e:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <UART_SetConfig+0x2ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365c:	d017      	beq.n	800368e <UART_SetConfig+0x272>
 800365e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003662:	d817      	bhi.n	8003694 <UART_SetConfig+0x278>
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003668:	d00b      	beq.n	8003682 <UART_SetConfig+0x266>
 800366a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366e:	d811      	bhi.n	8003694 <UART_SetConfig+0x278>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <UART_SetConfig+0x260>
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d006      	beq.n	8003688 <UART_SetConfig+0x26c>
 800367a:	e00b      	b.n	8003694 <UART_SetConfig+0x278>
 800367c:	2300      	movs	r3, #0
 800367e:	76fb      	strb	r3, [r7, #27]
 8003680:	e00d      	b.n	800369e <UART_SetConfig+0x282>
 8003682:	2302      	movs	r3, #2
 8003684:	76fb      	strb	r3, [r7, #27]
 8003686:	e00a      	b.n	800369e <UART_SetConfig+0x282>
 8003688:	2304      	movs	r3, #4
 800368a:	76fb      	strb	r3, [r7, #27]
 800368c:	e007      	b.n	800369e <UART_SetConfig+0x282>
 800368e:	2308      	movs	r3, #8
 8003690:	76fb      	strb	r3, [r7, #27]
 8003692:	e004      	b.n	800369e <UART_SetConfig+0x282>
 8003694:	2310      	movs	r3, #16
 8003696:	76fb      	strb	r3, [r7, #27]
 8003698:	e001      	b.n	800369e <UART_SetConfig+0x282>
 800369a:	2310      	movs	r3, #16
 800369c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <UART_SetConfig+0x2e4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f040 8087 	bne.w	80037b8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036aa:	7efb      	ldrb	r3, [r7, #27]
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d837      	bhi.n	8003720 <UART_SetConfig+0x304>
 80036b0:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x29c>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	08003721 	.word	0x08003721
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	08003721 	.word	0x08003721
 80036c8:	080036eb 	.word	0x080036eb
 80036cc:	08003721 	.word	0x08003721
 80036d0:	08003721 	.word	0x08003721
 80036d4:	08003721 	.word	0x08003721
 80036d8:	080036f3 	.word	0x080036f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7fe fe04 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80036e0:	6178      	str	r0, [r7, #20]
        break;
 80036e2:	e022      	b.n	800372a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <UART_SetConfig+0x300>)
 80036e6:	617b      	str	r3, [r7, #20]
        break;
 80036e8:	e01f      	b.n	800372a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe fd65 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 80036ee:	6178      	str	r0, [r7, #20]
        break;
 80036f0:	e01b      	b.n	800372a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f6:	617b      	str	r3, [r7, #20]
        break;
 80036f8:	e017      	b.n	800372a <UART_SetConfig+0x30e>
 80036fa:	bf00      	nop
 80036fc:	efff69f3 	.word	0xefff69f3
 8003700:	40008000 	.word	0x40008000
 8003704:	40013800 	.word	0x40013800
 8003708:	40021000 	.word	0x40021000
 800370c:	40004400 	.word	0x40004400
 8003710:	40004800 	.word	0x40004800
 8003714:	40004c00 	.word	0x40004c00
 8003718:	40005000 	.word	0x40005000
 800371c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	76bb      	strb	r3, [r7, #26]
        break;
 8003728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80f1 	beq.w	8003914 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	429a      	cmp	r2, r3
 8003740:	d305      	bcc.n	800374e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	429a      	cmp	r2, r3
 800374c:	d902      	bls.n	8003754 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	76bb      	strb	r3, [r7, #26]
 8003752:	e0df      	b.n	8003914 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	4618      	mov	r0, r3
 8003758:	f04f 0100 	mov.w	r1, #0
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	020b      	lsls	r3, r1, #8
 8003766:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800376a:	0202      	lsls	r2, r0, #8
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6849      	ldr	r1, [r1, #4]
 8003770:	0849      	lsrs	r1, r1, #1
 8003772:	4608      	mov	r0, r1
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	1814      	adds	r4, r2, r0
 800377a:	eb43 0501 	adc.w	r5, r3, r1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	461a      	mov	r2, r3
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	4620      	mov	r0, r4
 800378a:	4629      	mov	r1, r5
 800378c:	f7fc fd20 	bl	80001d0 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4613      	mov	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379e:	d308      	bcc.n	80037b2 <UART_SetConfig+0x396>
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a6:	d204      	bcs.n	80037b2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	e0b0      	b.n	8003914 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	76bb      	strb	r3, [r7, #26]
 80037b6:	e0ad      	b.n	8003914 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d15b      	bne.n	800387a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80037c2:	7efb      	ldrb	r3, [r7, #27]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d828      	bhi.n	800381a <UART_SetConfig+0x3fe>
 80037c8:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <UART_SetConfig+0x3b4>)
 80037ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ce:	bf00      	nop
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	08003805 	.word	0x08003805
 80037dc:	0800381b 	.word	0x0800381b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800381b 	.word	0x0800381b
 80037e8:	0800381b 	.word	0x0800381b
 80037ec:	0800381b 	.word	0x0800381b
 80037f0:	08003813 	.word	0x08003813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f4:	f7fe fd78 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80037f8:	6178      	str	r0, [r7, #20]
        break;
 80037fa:	e013      	b.n	8003824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037fc:	f7fe fd8a 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003800:	6178      	str	r0, [r7, #20]
        break;
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003804:	4b49      	ldr	r3, [pc, #292]	; (800392c <UART_SetConfig+0x510>)
 8003806:	617b      	str	r3, [r7, #20]
        break;
 8003808:	e00c      	b.n	8003824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7fe fcd5 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800380e:	6178      	str	r0, [r7, #20]
        break;
 8003810:	e008      	b.n	8003824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003816:	617b      	str	r3, [r7, #20]
        break;
 8003818:	e004      	b.n	8003824 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	76bb      	strb	r3, [r7, #26]
        break;
 8003822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d074      	beq.n	8003914 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005a      	lsls	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	441a      	add	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d916      	bls.n	8003874 <UART_SetConfig+0x458>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d212      	bcs.n	8003874 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	b29a      	uxth	r2, r3
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	4313      	orrs	r3, r2
 8003868:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	89fa      	ldrh	r2, [r7, #14]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e04f      	b.n	8003914 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	76bb      	strb	r3, [r7, #26]
 8003878:	e04c      	b.n	8003914 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387a:	7efb      	ldrb	r3, [r7, #27]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d828      	bhi.n	80038d2 <UART_SetConfig+0x4b6>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0x46c>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038c3 	.word	0x080038c3
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7fe fd1c 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80038b0:	6178      	str	r0, [r7, #20]
        break;
 80038b2:	e013      	b.n	80038dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe fd2e 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 80038b8:	6178      	str	r0, [r7, #20]
        break;
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <UART_SetConfig+0x510>)
 80038be:	617b      	str	r3, [r7, #20]
        break;
 80038c0:	e00c      	b.n	80038dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7fe fc79 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 80038c6:	6178      	str	r0, [r7, #20]
        break;
 80038c8:	e008      	b.n	80038dc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	617b      	str	r3, [r7, #20]
        break;
 80038d0:	e004      	b.n	80038dc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	76bb      	strb	r3, [r7, #26]
        break;
 80038da:	bf00      	nop
    }

    if (pclk != 0U)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	085a      	lsrs	r2, r3, #1
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d909      	bls.n	8003910 <UART_SetConfig+0x4f4>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d205      	bcs.n	8003910 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e001      	b.n	8003914 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003920:	7ebb      	ldrb	r3, [r7, #26]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bdb0      	pop	{r4, r5, r7, pc}
 800392a:	bf00      	nop
 800392c:	00f42400 	.word	0x00f42400

08003930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00a      	beq.n	800395a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01a      	beq.n	8003a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2e:	d10a      	bne.n	8003a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a84:	f7fd fa96 	bl	8000fb4 <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d10e      	bne.n	8003ab6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f82d 	bl	8003b06 <UART_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e023      	b.n	8003afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d10e      	bne.n	8003ae2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f817 	bl	8003b06 <UART_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e00d      	b.n	8003afe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b09c      	sub	sp, #112	; 0x70
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b16:	e0a5      	b.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1e:	f000 80a1 	beq.w	8003c64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b22:	f7fd fa47 	bl	8000fb4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d13e      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b4c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e6      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	663b      	str	r3, [r7, #96]	; 0x60
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e5      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e067      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d04f      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd2:	d147      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bdc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e6      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3308      	adds	r3, #8
 8003c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c30:	623a      	str	r2, [r7, #32]
 8003c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	69f9      	ldr	r1, [r7, #28]
 8003c36:	6a3a      	ldr	r2, [r7, #32]
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e5      	bne.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e010      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	f43f af4a 	beq.w	8003b18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3770      	adds	r7, #112	; 0x70
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <__NVIC_SetPriority>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	db0a      	blt.n	8003cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	490c      	ldr	r1, [pc, #48]	; (8003cdc <__NVIC_SetPriority+0x4c>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cb8:	e00a      	b.n	8003cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <__NVIC_SetPriority+0x50>)
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	0112      	lsls	r2, r2, #4
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	440b      	add	r3, r1
 8003cce:	761a      	strb	r2, [r3, #24]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000e100 	.word	0xe000e100
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <SysTick_Handler+0x1c>)
 8003cea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003cec:	f001 fd28 	bl	8005740 <xTaskGetSchedulerState>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003cf6:	f002 fb0f 	bl	8006318 <xPortSysTickHandler>
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010

08003d04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f06f 0004 	mvn.w	r0, #4
 8003d0e:	f7ff ffbf 	bl	8003c90 <__NVIC_SetPriority>
#endif
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d1e:	f3ef 8305 	mrs	r3, IPSR
 8003d22:	603b      	str	r3, [r7, #0]
  return(result);
 8003d24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d2a:	f06f 0305 	mvn.w	r3, #5
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	e00c      	b.n	8003d4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <osKernelInitialize+0x44>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <osKernelInitialize+0x44>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	e002      	b.n	8003d4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d4c:	687b      	ldr	r3, [r7, #4]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	2000009c 	.word	0x2000009c

08003d60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d66:	f3ef 8305 	mrs	r3, IPSR
 8003d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d72:	f06f 0305 	mvn.w	r3, #5
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	e010      	b.n	8003d9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <osKernelStart+0x48>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d109      	bne.n	8003d96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d82:	f7ff ffbf 	bl	8003d04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <osKernelStart+0x48>)
 8003d88:	2202      	movs	r2, #2
 8003d8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d8c:	f001 f87c 	bl	8004e88 <vTaskStartScheduler>
      stat = osOK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e002      	b.n	8003d9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d9c:	687b      	ldr	r3, [r7, #4]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000009c 	.word	0x2000009c

08003dac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08e      	sub	sp, #56	; 0x38
 8003db0:	af04      	add	r7, sp, #16
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dbc:	f3ef 8305 	mrs	r3, IPSR
 8003dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8003dc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d17e      	bne.n	8003ec6 <osThreadNew+0x11a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d07b      	beq.n	8003ec6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003dd2:	2318      	movs	r3, #24
 8003dd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d045      	beq.n	8003e72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <osThreadNew+0x48>
        name = attr->name;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <osThreadNew+0x6e>
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b38      	cmp	r3, #56	; 0x38
 8003e0c:	d805      	bhi.n	8003e1a <osThreadNew+0x6e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <osThreadNew+0x72>
        return (NULL);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e054      	b.n	8003ec8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <osThreadNew+0xa8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2bbb      	cmp	r3, #187	; 0xbb
 8003e3c:	d90a      	bls.n	8003e54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <osThreadNew+0xa8>
        mem = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e010      	b.n	8003e76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <osThreadNew+0xca>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <osThreadNew+0xca>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <osThreadNew+0xca>
          mem = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	e001      	b.n	8003e76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d110      	bne.n	8003e9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e84:	9202      	str	r2, [sp, #8]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6a3a      	ldr	r2, [r7, #32]
 8003e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fe0c 	bl	8004ab0 <xTaskCreateStatic>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	e013      	b.n	8003ec6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	f107 0310 	add.w	r3, r7, #16
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fe57 	bl	8004b6a <xTaskCreate>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <osThreadNew+0x11a>
            hTask = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ec6:	693b      	ldr	r3, [r7, #16]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3728      	adds	r7, #40	; 0x28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed8:	f3ef 8305 	mrs	r3, IPSR
 8003edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ede:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <osDelay+0x1c>
    stat = osErrorISR;
 8003ee4:	f06f 0305 	mvn.w	r3, #5
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e007      	b.n	8003efc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 ff92 	bl	8004e20 <vTaskDelay>
    }
  }

  return (stat);
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4a06      	ldr	r2, [pc, #24]	; (8003f38 <vApplicationGetIdleTaskMemory+0x30>)
 8003f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200000a0 	.word	0x200000a0
 8003f38:	2000015c 	.word	0x2000015c

08003f3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a06      	ldr	r2, [pc, #24]	; (8003f6c <vApplicationGetTimerTaskMemory+0x30>)
 8003f52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	2000035c 	.word	0x2000035c
 8003f6c:	20000418 	.word	0x20000418

08003f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 0208 	add.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f103 0208 	add.w	r2, r3, #8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f103 0208 	add.w	r2, r3, #8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	601a      	str	r2, [r3, #0]
}
 8004006:	bf00      	nop
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004028:	d103      	bne.n	8004032 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e00c      	b.n	800404c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3308      	adds	r3, #8
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	e002      	b.n	8004040 <vListInsert+0x2e>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	d2f6      	bcs.n	800403a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6892      	ldr	r2, [r2, #8]
 800409a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6852      	ldr	r2, [r2, #4]
 80040a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d103      	bne.n	80040b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	1e5a      	subs	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xQueueGenericReset+0x2a>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60bb      	str	r3, [r7, #8]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004102:	f002 f877 	bl	80061f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	3b01      	subs	r3, #1
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	441a      	add	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d114      	bne.n	8004182 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01a      	beq.n	8004196 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3310      	adds	r3, #16
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f929 	bl	80053bc <xTaskRemoveFromEventList>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d012      	beq.n	8004196 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <xQueueGenericReset+0xcc>)
 8004172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	e009      	b.n	8004196 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3310      	adds	r3, #16
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fef2 	bl	8003f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3324      	adds	r3, #36	; 0x24
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff feed 	bl	8003f70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004196:	f002 f85d 	bl	8006254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800419a:	2301      	movs	r3, #1
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08e      	sub	sp, #56	; 0x38
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ce:	bf00      	nop
 80041d0:	e7fe      	b.n	80041d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <xQueueGenericCreateStatic+0x52>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <xQueueGenericCreateStatic+0x56>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <xQueueGenericCreateStatic+0x58>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	623b      	str	r3, [r7, #32]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <xQueueGenericCreateStatic+0x7e>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <xQueueGenericCreateStatic+0x82>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <xQueueGenericCreateStatic+0x84>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	61fb      	str	r3, [r7, #28]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004246:	2350      	movs	r3, #80	; 0x50
 8004248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b50      	cmp	r3, #80	; 0x50
 800424e:	d00a      	beq.n	8004266 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	61bb      	str	r3, [r7, #24]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004266:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800427a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f805 	bl	8004298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004290:	4618      	mov	r0, r3
 8004292:	3730      	adds	r7, #48	; 0x30
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e002      	b.n	80042ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042c6:	2101      	movs	r1, #1
 80042c8:	69b8      	ldr	r0, [r7, #24]
 80042ca:	f7ff ff05 	bl	80040d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08e      	sub	sp, #56	; 0x38
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <xQueueGenericSend+0x32>
	__asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <xQueueGenericSend+0x40>
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <xQueueGenericSend+0x44>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <xQueueGenericSend+0x46>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <xQueueGenericSend+0x60>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d103      	bne.n	800434e <xQueueGenericSend+0x6e>
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <xQueueGenericSend+0x72>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueGenericSend+0x74>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xQueueGenericSend+0x8e>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623b      	str	r3, [r7, #32]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800436e:	f001 f9e7 	bl	8005740 <xTaskGetSchedulerState>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <xQueueGenericSend+0x9e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <xQueueGenericSend+0xa2>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <xQueueGenericSend+0xa4>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <xQueueGenericSend+0xbe>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	61fb      	str	r3, [r7, #28]
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800439e:	f001 ff29 	bl	80061f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <xQueueGenericSend+0xd4>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d129      	bne.n	8004408 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ba:	f000 fa0b 	bl	80047d4 <prvCopyDataToQueue>
 80043be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	3324      	adds	r3, #36	; 0x24
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fff5 	bl	80053bc <xTaskRemoveFromEventList>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043d8:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <xQueueGenericSend+0x1f8>)
 80043da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	e00a      	b.n	8004400 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043f0:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <xQueueGenericSend+0x1f8>)
 80043f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004400:	f001 ff28 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 8004404:	2301      	movs	r3, #1
 8004406:	e063      	b.n	80044d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800440e:	f001 ff21 	bl	8006254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004412:	2300      	movs	r3, #0
 8004414:	e05c      	b.n	80044d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800441c:	f107 0314 	add.w	r3, r7, #20
 8004420:	4618      	mov	r0, r3
 8004422:	f001 f82f 	bl	8005484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004426:	2301      	movs	r3, #1
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800442a:	f001 ff13 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800442e:	f000 fd9b 	bl	8004f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004432:	f001 fedf 	bl	80061f4 <vPortEnterCritical>
 8004436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800443c:	b25b      	sxtb	r3, r3
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004442:	d103      	bne.n	800444c <xQueueGenericSend+0x16c>
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004452:	b25b      	sxtb	r3, r3
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d103      	bne.n	8004462 <xQueueGenericSend+0x182>
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004462:	f001 fef7 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004466:	1d3a      	adds	r2, r7, #4
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f001 f81e 	bl	80054b0 <xTaskCheckForTimeOut>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d124      	bne.n	80044c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800447a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447c:	f000 faa2 	bl	80049c4 <prvIsQueueFull>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	3310      	adds	r3, #16
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ff44 	bl	800531c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004496:	f000 fa2d 	bl	80048f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800449a:	f000 fd73 	bl	8004f84 <xTaskResumeAll>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f47f af7c 	bne.w	800439e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <xQueueGenericSend+0x1f8>)
 80044a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	e772      	b.n	800439e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ba:	f000 fa1b 	bl	80048f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044be:	f000 fd61 	bl	8004f84 <xTaskResumeAll>
 80044c2:	e76c      	b.n	800439e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c6:	f000 fa15 	bl	80048f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ca:	f000 fd5b 	bl	8004f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3738      	adds	r7, #56	; 0x38
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b090      	sub	sp, #64	; 0x40
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <xQueueGenericSendFromISR+0x3c>
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <xQueueGenericSendFromISR+0x40>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <xQueueGenericSendFromISR+0x42>
 800451c:	2300      	movs	r3, #0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d103      	bne.n	8004546 <xQueueGenericSendFromISR+0x6a>
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <xQueueGenericSendFromISR+0x6e>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <xQueueGenericSendFromISR+0x70>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	623b      	str	r3, [r7, #32]
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004566:	f001 ff27 	bl	80063b8 <vPortValidateInterruptPriority>
	__asm volatile
 800456a:	f3ef 8211 	mrs	r2, BASEPRI
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61fa      	str	r2, [r7, #28]
 8004580:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004582:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <xQueueGenericSendFromISR+0xbc>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d12f      	bne.n	80045f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800459e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045ae:	f000 f911 	bl	80047d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ba:	d112      	bne.n	80045e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d016      	beq.n	80045f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	3324      	adds	r3, #36	; 0x24
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fef7 	bl	80053bc <xTaskRemoveFromEventList>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e007      	b.n	80045f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045e6:	3301      	adds	r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	b25a      	sxtb	r2, r3
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80045f6:	e001      	b.n	80045fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f383 8811 	msr	BASEPRI, r3
}
 8004606:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800460a:	4618      	mov	r0, r3
 800460c:	3740      	adds	r7, #64	; 0x40
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08c      	sub	sp, #48	; 0x30
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004620:	2300      	movs	r3, #0
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <xQueueReceive+0x30>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	623b      	str	r3, [r7, #32]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <xQueueReceive+0x3e>
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <xQueueReceive+0x42>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueReceive+0x44>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueReceive+0x5e>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	61fb      	str	r3, [r7, #28]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004672:	f001 f865 	bl	8005740 <xTaskGetSchedulerState>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <xQueueReceive+0x6e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <xQueueReceive+0x72>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <xQueueReceive+0x74>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueReceive+0x8e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	61bb      	str	r3, [r7, #24]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046a2:	f001 fda7 	bl	80061f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01f      	beq.n	80046f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b6:	f000 f8f7 	bl	80048a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00f      	beq.n	80046ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	3310      	adds	r3, #16
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fe74 	bl	80053bc <xTaskRemoveFromEventList>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <xQueueReceive+0x1bc>)
 80046dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046ea:	f001 fdb3 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e069      	b.n	80047c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046f8:	f001 fdac 	bl	8006254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e062      	b.n	80047c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004706:	f107 0310 	add.w	r3, r7, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f000 feba 	bl	8005484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004714:	f001 fd9e 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004718:	f000 fc26 	bl	8004f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800471c:	f001 fd6a 	bl	80061f4 <vPortEnterCritical>
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004726:	b25b      	sxtb	r3, r3
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472c:	d103      	bne.n	8004736 <xQueueReceive+0x122>
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800473c:	b25b      	sxtb	r3, r3
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004742:	d103      	bne.n	800474c <xQueueReceive+0x138>
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474c:	f001 fd82 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004750:	1d3a      	adds	r2, r7, #4
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fea9 	bl	80054b0 <xTaskCheckForTimeOut>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d123      	bne.n	80047ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004766:	f000 f917 	bl	8004998 <prvIsQueueEmpty>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d017      	beq.n	80047a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	3324      	adds	r3, #36	; 0x24
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fdcf 	bl	800531c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800477e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004780:	f000 f8b8 	bl	80048f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004784:	f000 fbfe 	bl	8004f84 <xTaskResumeAll>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d189      	bne.n	80046a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <xQueueReceive+0x1bc>)
 8004790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	e780      	b.n	80046a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a2:	f000 f8a7 	bl	80048f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047a6:	f000 fbed 	bl	8004f84 <xTaskResumeAll>
 80047aa:	e77a      	b.n	80046a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ae:	f000 f8a1 	bl	80048f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047b2:	f000 fbe7 	bl	8004f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b8:	f000 f8ee 	bl	8004998 <prvIsQueueEmpty>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f43f af6f 	beq.w	80046a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3730      	adds	r7, #48	; 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d14d      	bne.n	8004896 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 ffbc 	bl	800577c <xTaskPriorityDisinherit>
 8004804:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	e043      	b.n	8004896 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d119      	bne.n	8004848 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6858      	ldr	r0, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	461a      	mov	r2, r3
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	f002 f818 	bl	8006854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	d32b      	bcc.n	8004896 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	e026      	b.n	8004896 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68d8      	ldr	r0, [r3, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	461a      	mov	r2, r3
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	f001 fffe 	bl	8006854 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	425b      	negs	r3, r3
 8004862:	441a      	add	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d207      	bcs.n	8004884 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	425b      	negs	r3, r3
 800487e:	441a      	add	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d105      	bne.n	8004896 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3b01      	subs	r3, #1
 8004894:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800489e:	697b      	ldr	r3, [r7, #20]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d303      	bcc.n	80048dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68d9      	ldr	r1, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	461a      	mov	r2, r3
 80048e6:	6838      	ldr	r0, [r7, #0]
 80048e8:	f001 ffb4 	bl	8006854 <memcpy>
	}
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048fc:	f001 fc7a 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004906:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004908:	e011      	b.n	800492e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d012      	beq.n	8004938 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3324      	adds	r3, #36	; 0x24
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fd50 	bl	80053bc <xTaskRemoveFromEventList>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004922:	f000 fe27 	bl	8005574 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	3b01      	subs	r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800492e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	dce9      	bgt.n	800490a <prvUnlockQueue+0x16>
 8004936:	e000      	b.n	800493a <prvUnlockQueue+0x46>
					break;
 8004938:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	22ff      	movs	r2, #255	; 0xff
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004942:	f001 fc87 	bl	8006254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004946:	f001 fc55 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004950:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004952:	e011      	b.n	8004978 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3310      	adds	r3, #16
 8004960:	4618      	mov	r0, r3
 8004962:	f000 fd2b 	bl	80053bc <xTaskRemoveFromEventList>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800496c:	f000 fe02 	bl	8005574 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004970:	7bbb      	ldrb	r3, [r7, #14]
 8004972:	3b01      	subs	r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800497c:	2b00      	cmp	r3, #0
 800497e:	dce9      	bgt.n	8004954 <prvUnlockQueue+0x60>
 8004980:	e000      	b.n	8004984 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004982:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	22ff      	movs	r2, #255	; 0xff
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800498c:	f001 fc62 	bl	8006254 <vPortExitCritical>
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049a0:	f001 fc28 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e001      	b.n	80049b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049b6:	f001 fc4d 	bl	8006254 <vPortExitCritical>

	return xReturn;
 80049ba:	68fb      	ldr	r3, [r7, #12]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049cc:	f001 fc12 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d102      	bne.n	80049e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049dc:	2301      	movs	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	e001      	b.n	80049e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049e6:	f001 fc35 	bl	8006254 <vPortExitCritical>

	return xReturn;
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e014      	b.n	8004a2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a04:	4a0f      	ldr	r2, [pc, #60]	; (8004a44 <vQueueAddToRegistry+0x50>)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <vQueueAddToRegistry+0x50>)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <vQueueAddToRegistry+0x50>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a26:	e006      	b.n	8004a36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b07      	cmp	r3, #7
 8004a32:	d9e7      	bls.n	8004a04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20001be8 	.word	0x20001be8

08004a48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a58:	f001 fbcc 	bl	80061f4 <vPortEnterCritical>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a68:	d103      	bne.n	8004a72 <vQueueWaitForMessageRestricted+0x2a>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7e:	d103      	bne.n	8004a88 <vQueueWaitForMessageRestricted+0x40>
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a88:	f001 fbe4 	bl	8006254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3324      	adds	r3, #36	; 0x24
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fc61 	bl	8005364 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004aa2:	6978      	ldr	r0, [r7, #20]
 8004aa4:	f7ff ff26 	bl	80048f4 <prvUnlockQueue>
	}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	; 0x38
 8004ab4:	af04      	add	r7, sp, #16
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	623b      	str	r3, [r7, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	e7fe      	b.n	8004ad8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	61fb      	str	r3, [r7, #28]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004af6:	23bc      	movs	r3, #188	; 0xbc
 8004af8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2bbc      	cmp	r3, #188	; 0xbc
 8004afe:	d00a      	beq.n	8004b16 <xTaskCreateStatic+0x66>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	61bb      	str	r3, [r7, #24]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01e      	beq.n	8004b5c <xTaskCreateStatic+0xac>
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2202      	movs	r2, #2
 8004b32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b36:	2300      	movs	r3, #0
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	9302      	str	r3, [sp, #8]
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f850 	bl	8004bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b56:	f000 f8f3 	bl	8004d40 <prvAddNewTaskToReadyList>
 8004b5a:	e001      	b.n	8004b60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b60:	697b      	ldr	r3, [r7, #20]
	}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3728      	adds	r7, #40	; 0x28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b08c      	sub	sp, #48	; 0x30
 8004b6e:	af04      	add	r7, sp, #16
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fc5a 	bl	8006438 <pvPortMalloc>
 8004b84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b8c:	20bc      	movs	r0, #188	; 0xbc
 8004b8e:	f001 fc53 	bl	8006438 <pvPortMalloc>
 8004b92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004ba0:	e005      	b.n	8004bae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f001 fd14 	bl	80065d0 <vPortFree>
 8004ba8:	e001      	b.n	8004bae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bbc:	88fa      	ldrh	r2, [r7, #6]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9303      	str	r3, [sp, #12]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	9302      	str	r3, [sp, #8]
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f80e 	bl	8004bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bd8:	69f8      	ldr	r0, [r7, #28]
 8004bda:	f000 f8b1 	bl	8004d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e002      	b.n	8004bea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bea:	69bb      	ldr	r3, [r7, #24]
	}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	21a5      	movs	r1, #165	; 0xa5
 8004c0e:	f001 fe2f 	bl	8006870 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	617b      	str	r3, [r7, #20]
}
 8004c48:	bf00      	nop
 8004c4a:	e7fe      	b.n	8004c4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01f      	beq.n	8004c92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e012      	b.n	8004c7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	7819      	ldrb	r1, [r3, #0]
 8004c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	3334      	adds	r3, #52	; 0x34
 8004c68:	460a      	mov	r2, r1
 8004c6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d006      	beq.n	8004c86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d9e9      	bls.n	8004c58 <prvInitialiseNewTask+0x64>
 8004c84:	e000      	b.n	8004c88 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c90:	e003      	b.n	8004c9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	2b37      	cmp	r3, #55	; 0x37
 8004c9e:	d901      	bls.n	8004ca4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ca0:	2337      	movs	r3, #55	; 0x37
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff f978 	bl	8003fb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	3318      	adds	r3, #24
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff f973 	bl	8003fb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	3354      	adds	r3, #84	; 0x54
 8004cf4:	2260      	movs	r2, #96	; 0x60
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f001 fdb9 	bl	8006870 <memset>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <prvInitialiseNewTask+0x140>)
 8004d02:	659a      	str	r2, [r3, #88]	; 0x58
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <prvInitialiseNewTask+0x144>)
 8004d08:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	; (8004d3c <prvInitialiseNewTask+0x148>)
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	69b8      	ldr	r0, [r7, #24]
 8004d16:	f001 f941 	bl	8005f9c <pxPortInitialiseStack>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d2c:	bf00      	nop
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	08006b04 	.word	0x08006b04
 8004d38:	08006b24 	.word	0x08006b24
 8004d3c:	08006ae4 	.word	0x08006ae4

08004d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d48:	f001 fa54 	bl	80061f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d56:	4b2c      	ldr	r3, [pc, #176]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d5e:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d64:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <prvAddNewTaskToReadyList+0xc4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d110      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d6c:	f000 fc26 	bl	80055bc <prvInitialiseTaskLists>
 8004d70:	e00d      	b.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <prvAddNewTaskToReadyList+0xcc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d7a:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d802      	bhi.n	8004d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d88:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <prvAddNewTaskToReadyList+0xd0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a1e      	ldr	r2, [pc, #120]	; (8004e10 <prvAddNewTaskToReadyList+0xd0>)
 8004d96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <prvAddNewTaskToReadyList+0xd0>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <prvAddNewTaskToReadyList+0xd4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d903      	bls.n	8004db4 <prvAddNewTaskToReadyList+0x74>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <prvAddNewTaskToReadyList+0xd4>)
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <prvAddNewTaskToReadyList+0xd8>)
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f7ff f8fd 	bl	8003fca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dd0:	f001 fa40 	bl	8006254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <prvAddNewTaskToReadyList+0xcc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00e      	beq.n	8004dfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <prvAddNewTaskToReadyList+0xc8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d207      	bcs.n	8004dfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <prvAddNewTaskToReadyList+0xdc>)
 8004dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000cec 	.word	0x20000cec
 8004e08:	20000818 	.word	0x20000818
 8004e0c:	20000cf8 	.word	0x20000cf8
 8004e10:	20000d08 	.word	0x20000d08
 8004e14:	20000cf4 	.word	0x20000cf4
 8004e18:	2000081c 	.word	0x2000081c
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d017      	beq.n	8004e62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <vTaskDelay+0x60>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <vTaskDelay+0x30>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60bb      	str	r3, [r7, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e50:	f000 f88a 	bl	8004f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e54:	2100      	movs	r1, #0
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fcfe 	bl	8005858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e5c:	f000 f892 	bl	8004f84 <xTaskResumeAll>
 8004e60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <vTaskDelay+0x64>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000d14 	.word	0x20000d14
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e96:	463a      	mov	r2, r7
 8004e98:	1d39      	adds	r1, r7, #4
 8004e9a:	f107 0308 	add.w	r3, r7, #8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff f832 	bl	8003f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	9202      	str	r2, [sp, #8]
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	460a      	mov	r2, r1
 8004eb6:	4924      	ldr	r1, [pc, #144]	; (8004f48 <vTaskStartScheduler+0xc0>)
 8004eb8:	4824      	ldr	r0, [pc, #144]	; (8004f4c <vTaskStartScheduler+0xc4>)
 8004eba:	f7ff fdf9 	bl	8004ab0 <xTaskCreateStatic>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <vTaskStartScheduler+0xc8>)
 8004ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ec4:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <vTaskStartScheduler+0xc8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e001      	b.n	8004ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d102      	bne.n	8004ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004edc:	f000 fd10 	bl	8005900 <xTimerCreateTimerTask>
 8004ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d11b      	bne.n	8004f20 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	613b      	str	r3, [r7, #16]
}
 8004efa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <vTaskStartScheduler+0xcc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3354      	adds	r3, #84	; 0x54
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <vTaskStartScheduler+0xd0>)
 8004f04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <vTaskStartScheduler+0xd4>)
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <vTaskStartScheduler+0xd8>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <vTaskStartScheduler+0xdc>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f1a:	f001 f8c9 	bl	80060b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f1e:	e00e      	b.n	8004f3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f26:	d10a      	bne.n	8004f3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	60fb      	str	r3, [r7, #12]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <vTaskStartScheduler+0xb4>
}
 8004f3e:	bf00      	nop
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	08006a3c 	.word	0x08006a3c
 8004f4c:	0800558d 	.word	0x0800558d
 8004f50:	20000d10 	.word	0x20000d10
 8004f54:	20000818 	.word	0x20000818
 8004f58:	20000010 	.word	0x20000010
 8004f5c:	20000d0c 	.word	0x20000d0c
 8004f60:	20000cf8 	.word	0x20000cf8
 8004f64:	20000cf0 	.word	0x20000cf0

08004f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <vTaskSuspendAll+0x18>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <vTaskSuspendAll+0x18>)
 8004f74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000d14 	.word	0x20000d14

08004f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f92:	4b42      	ldr	r3, [pc, #264]	; (800509c <xTaskResumeAll+0x118>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	603b      	str	r3, [r7, #0]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fb0:	f001 f920 	bl	80061f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fb4:	4b39      	ldr	r3, [pc, #228]	; (800509c <xTaskResumeAll+0x118>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <xTaskResumeAll+0x118>)
 8004fbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b37      	ldr	r3, [pc, #220]	; (800509c <xTaskResumeAll+0x118>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d162      	bne.n	800508c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <xTaskResumeAll+0x11c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d05e      	beq.n	800508c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fce:	e02f      	b.n	8005030 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <xTaskResumeAll+0x120>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3318      	adds	r3, #24
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff f851 	bl	8004084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff f84c 	bl	8004084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <xTaskResumeAll+0x124>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <xTaskResumeAll+0x7c>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <xTaskResumeAll+0x124>)
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <xTaskResumeAll+0x128>)
 800500e:	441a      	add	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fe ffd7 	bl	8003fca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <xTaskResumeAll+0x12c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <xTaskResumeAll+0x130>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005030:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <xTaskResumeAll+0x120>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1cb      	bne.n	8004fd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800503e:	f000 fb5f 	bl	8005700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005042:	4b1d      	ldr	r3, [pc, #116]	; (80050b8 <xTaskResumeAll+0x134>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d010      	beq.n	8005070 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800504e:	f000 f847 	bl	80050e0 <xTaskIncrementTick>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <xTaskResumeAll+0x130>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f1      	bne.n	800504e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800506a:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <xTaskResumeAll+0x134>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005070:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <xTaskResumeAll+0x130>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <xTaskResumeAll+0x138>)
 800507e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800508c:	f001 f8e2 	bl	8006254 <vPortExitCritical>

	return xAlreadyYielded;
 8005090:	68bb      	ldr	r3, [r7, #8]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000d14 	.word	0x20000d14
 80050a0:	20000cec 	.word	0x20000cec
 80050a4:	20000cac 	.word	0x20000cac
 80050a8:	20000cf4 	.word	0x20000cf4
 80050ac:	2000081c 	.word	0x2000081c
 80050b0:	20000818 	.word	0x20000818
 80050b4:	20000d00 	.word	0x20000d00
 80050b8:	20000cfc 	.word	0x20000cfc
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <xTaskGetTickCount+0x1c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000cf0 	.word	0x20000cf0

080050e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <xTaskIncrementTick+0x148>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 808f 	bne.w	8005212 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050f4:	4b4d      	ldr	r3, [pc, #308]	; (800522c <xTaskIncrementTick+0x14c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050fc:	4a4b      	ldr	r2, [pc, #300]	; (800522c <xTaskIncrementTick+0x14c>)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d120      	bne.n	800514a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005108:	4b49      	ldr	r3, [pc, #292]	; (8005230 <xTaskIncrementTick+0x150>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <xTaskIncrementTick+0x48>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	603b      	str	r3, [r7, #0]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xTaskIncrementTick+0x46>
 8005128:	4b41      	ldr	r3, [pc, #260]	; (8005230 <xTaskIncrementTick+0x150>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <xTaskIncrementTick+0x154>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a3f      	ldr	r2, [pc, #252]	; (8005230 <xTaskIncrementTick+0x150>)
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	4a3f      	ldr	r2, [pc, #252]	; (8005234 <xTaskIncrementTick+0x154>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <xTaskIncrementTick+0x158>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	4a3d      	ldr	r2, [pc, #244]	; (8005238 <xTaskIncrementTick+0x158>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	f000 fadb 	bl	8005700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800514a:	4b3c      	ldr	r3, [pc, #240]	; (800523c <xTaskIncrementTick+0x15c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d349      	bcc.n	80051e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005154:	4b36      	ldr	r3, [pc, #216]	; (8005230 <xTaskIncrementTick+0x150>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <xTaskIncrementTick+0x15c>)
 8005160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005164:	601a      	str	r2, [r3, #0]
					break;
 8005166:	e03f      	b.n	80051e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005168:	4b31      	ldr	r3, [pc, #196]	; (8005230 <xTaskIncrementTick+0x150>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d203      	bcs.n	8005188 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005180:	4a2e      	ldr	r2, [pc, #184]	; (800523c <xTaskIncrementTick+0x15c>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005186:	e02f      	b.n	80051e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3304      	adds	r3, #4
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe ff79 	bl	8004084 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3318      	adds	r3, #24
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe ff70 	bl	8004084 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b25      	ldr	r3, [pc, #148]	; (8005240 <xTaskIncrementTick+0x160>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <xTaskIncrementTick+0xd8>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	4a22      	ldr	r2, [pc, #136]	; (8005240 <xTaskIncrementTick+0x160>)
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <xTaskIncrementTick+0x164>)
 80051c6:	441a      	add	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f7fe fefb 	bl	8003fca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <xTaskIncrementTick+0x168>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3b8      	bcc.n	8005154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e6:	e7b5      	b.n	8005154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <xTaskIncrementTick+0x168>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ee:	4915      	ldr	r1, [pc, #84]	; (8005244 <xTaskIncrementTick+0x164>)
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d901      	bls.n	8005204 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005200:	2301      	movs	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <xTaskIncrementTick+0x16c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	e004      	b.n	800521c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005212:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <xTaskIncrementTick+0x170>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <xTaskIncrementTick+0x170>)
 800521a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800521c:	697b      	ldr	r3, [r7, #20]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000d14 	.word	0x20000d14
 800522c:	20000cf0 	.word	0x20000cf0
 8005230:	20000ca4 	.word	0x20000ca4
 8005234:	20000ca8 	.word	0x20000ca8
 8005238:	20000d04 	.word	0x20000d04
 800523c:	20000d0c 	.word	0x20000d0c
 8005240:	20000cf4 	.word	0x20000cf4
 8005244:	2000081c 	.word	0x2000081c
 8005248:	20000818 	.word	0x20000818
 800524c:	20000d00 	.word	0x20000d00
 8005250:	20000cfc 	.word	0x20000cfc

08005254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800525a:	4b2a      	ldr	r3, [pc, #168]	; (8005304 <vTaskSwitchContext+0xb0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005262:	4b29      	ldr	r3, [pc, #164]	; (8005308 <vTaskSwitchContext+0xb4>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005268:	e046      	b.n	80052f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800526a:	4b27      	ldr	r3, [pc, #156]	; (8005308 <vTaskSwitchContext+0xb4>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	4b26      	ldr	r3, [pc, #152]	; (800530c <vTaskSwitchContext+0xb8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e010      	b.n	800529a <vTaskSwitchContext+0x46>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <vTaskSwitchContext+0x40>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vTaskSwitchContext+0x3e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	3b01      	subs	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	491d      	ldr	r1, [pc, #116]	; (8005310 <vTaskSwitchContext+0xbc>)
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0e4      	beq.n	8005278 <vTaskSwitchContext+0x24>
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <vTaskSwitchContext+0xbc>)
 80052ba:	4413      	add	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	3308      	adds	r3, #8
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d104      	bne.n	80052de <vTaskSwitchContext+0x8a>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <vTaskSwitchContext+0xc0>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <vTaskSwitchContext+0xb8>)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <vTaskSwitchContext+0xc0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3354      	adds	r3, #84	; 0x54
 80052f4:	4a08      	ldr	r2, [pc, #32]	; (8005318 <vTaskSwitchContext+0xc4>)
 80052f6:	6013      	str	r3, [r2, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000d14 	.word	0x20000d14
 8005308:	20000d00 	.word	0x20000d00
 800530c:	20000cf4 	.word	0x20000cf4
 8005310:	2000081c 	.word	0x2000081c
 8005314:	20000818 	.word	0x20000818
 8005318:	20000010 	.word	0x20000010

0800531c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	60fb      	str	r3, [r7, #12]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005342:	4b07      	ldr	r3, [pc, #28]	; (8005360 <vTaskPlaceOnEventList+0x44>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3318      	adds	r3, #24
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fe fe61 	bl	8004012 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005350:	2101      	movs	r1, #1
 8005352:	6838      	ldr	r0, [r7, #0]
 8005354:	f000 fa80 	bl	8005858 <prvAddCurrentTaskToDelayedList>
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000818 	.word	0x20000818

08005364 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	617b      	str	r3, [r7, #20]
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800538c:	4b0a      	ldr	r3, [pc, #40]	; (80053b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3318      	adds	r3, #24
 8005392:	4619      	mov	r1, r3
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7fe fe18 	bl	8003fca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	68b8      	ldr	r0, [r7, #8]
 80053aa:	f000 fa55 	bl	8005858 <prvAddCurrentTaskToDelayedList>
	}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000818 	.word	0x20000818

080053bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3318      	adds	r3, #24
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fe fe49 	bl	8004084 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <xTaskRemoveFromEventList+0xb0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d11d      	bne.n	8005436 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fe40 	bl	8004084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	4b19      	ldr	r3, [pc, #100]	; (8005470 <xTaskRemoveFromEventList+0xb4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d903      	bls.n	8005418 <xTaskRemoveFromEventList+0x5c>
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	4a16      	ldr	r2, [pc, #88]	; (8005470 <xTaskRemoveFromEventList+0xb4>)
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4a13      	ldr	r2, [pc, #76]	; (8005474 <xTaskRemoveFromEventList+0xb8>)
 8005426:	441a      	add	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3304      	adds	r3, #4
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f7fe fdcb 	bl	8003fca <vListInsertEnd>
 8005434:	e005      	b.n	8005442 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	3318      	adds	r3, #24
 800543a:	4619      	mov	r1, r3
 800543c:	480e      	ldr	r0, [pc, #56]	; (8005478 <xTaskRemoveFromEventList+0xbc>)
 800543e:	f7fe fdc4 	bl	8003fca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <xTaskRemoveFromEventList+0xc0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d905      	bls.n	800545c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005450:	2301      	movs	r3, #1
 8005452:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <xTaskRemoveFromEventList+0xc4>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e001      	b.n	8005460 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005460:	697b      	ldr	r3, [r7, #20]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000d14 	.word	0x20000d14
 8005470:	20000cf4 	.word	0x20000cf4
 8005474:	2000081c 	.word	0x2000081c
 8005478:	20000cac 	.word	0x20000cac
 800547c:	20000818 	.word	0x20000818
 8005480:	20000d00 	.word	0x20000d00

08005484 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <vTaskInternalSetTimeOutState+0x24>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <vTaskInternalSetTimeOutState+0x28>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000d04 	.word	0x20000d04
 80054ac:	20000cf0 	.word	0x20000cf0

080054b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	613b      	str	r3, [r7, #16]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60fb      	str	r3, [r7, #12]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054f2:	f000 fe7f 	bl	80061f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054f6:	4b1d      	ldr	r3, [pc, #116]	; (800556c <xTaskCheckForTimeOut+0xbc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800550e:	d102      	bne.n	8005516 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e023      	b.n	800555e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <xTaskCheckForTimeOut+0xc0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d007      	beq.n	8005532 <xTaskCheckForTimeOut+0x82>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	429a      	cmp	r2, r3
 800552a:	d302      	bcc.n	8005532 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800552c:	2301      	movs	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	e015      	b.n	800555e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	429a      	cmp	r2, r3
 800553a:	d20b      	bcs.n	8005554 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff ff9b 	bl	8005484 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
 8005552:	e004      	b.n	800555e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800555a:	2301      	movs	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800555e:	f000 fe79 	bl	8006254 <vPortExitCritical>

	return xReturn;
 8005562:	69fb      	ldr	r3, [r7, #28]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3720      	adds	r7, #32
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000cf0 	.word	0x20000cf0
 8005570:	20000d04 	.word	0x20000d04

08005574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <vTaskMissedYield+0x14>)
 800557a:	2201      	movs	r2, #1
 800557c:	601a      	str	r2, [r3, #0]
}
 800557e:	bf00      	nop
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000d00 	.word	0x20000d00

0800558c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005594:	f000 f852 	bl	800563c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <prvIdleTask+0x28>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d9f9      	bls.n	8005594 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <prvIdleTask+0x2c>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055b0:	e7f0      	b.n	8005594 <prvIdleTask+0x8>
 80055b2:	bf00      	nop
 80055b4:	2000081c 	.word	0x2000081c
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c2:	2300      	movs	r3, #0
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	e00c      	b.n	80055e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4a12      	ldr	r2, [pc, #72]	; (800561c <prvInitialiseTaskLists+0x60>)
 80055d4:	4413      	add	r3, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fcca 	bl	8003f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3301      	adds	r3, #1
 80055e0:	607b      	str	r3, [r7, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b37      	cmp	r3, #55	; 0x37
 80055e6:	d9ef      	bls.n	80055c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055e8:	480d      	ldr	r0, [pc, #52]	; (8005620 <prvInitialiseTaskLists+0x64>)
 80055ea:	f7fe fcc1 	bl	8003f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055ee:	480d      	ldr	r0, [pc, #52]	; (8005624 <prvInitialiseTaskLists+0x68>)
 80055f0:	f7fe fcbe 	bl	8003f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055f4:	480c      	ldr	r0, [pc, #48]	; (8005628 <prvInitialiseTaskLists+0x6c>)
 80055f6:	f7fe fcbb 	bl	8003f70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055fa:	480c      	ldr	r0, [pc, #48]	; (800562c <prvInitialiseTaskLists+0x70>)
 80055fc:	f7fe fcb8 	bl	8003f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005600:	480b      	ldr	r0, [pc, #44]	; (8005630 <prvInitialiseTaskLists+0x74>)
 8005602:	f7fe fcb5 	bl	8003f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <prvInitialiseTaskLists+0x78>)
 8005608:	4a05      	ldr	r2, [pc, #20]	; (8005620 <prvInitialiseTaskLists+0x64>)
 800560a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <prvInitialiseTaskLists+0x7c>)
 800560e:	4a05      	ldr	r2, [pc, #20]	; (8005624 <prvInitialiseTaskLists+0x68>)
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2000081c 	.word	0x2000081c
 8005620:	20000c7c 	.word	0x20000c7c
 8005624:	20000c90 	.word	0x20000c90
 8005628:	20000cac 	.word	0x20000cac
 800562c:	20000cc0 	.word	0x20000cc0
 8005630:	20000cd8 	.word	0x20000cd8
 8005634:	20000ca4 	.word	0x20000ca4
 8005638:	20000ca8 	.word	0x20000ca8

0800563c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005642:	e019      	b.n	8005678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005644:	f000 fdd6 	bl	80061f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <prvCheckTasksWaitingTermination+0x50>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe fd15 	bl	8004084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <prvCheckTasksWaitingTermination+0x54>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	4a0b      	ldr	r2, [pc, #44]	; (8005690 <prvCheckTasksWaitingTermination+0x54>)
 8005662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <prvCheckTasksWaitingTermination+0x58>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3b01      	subs	r3, #1
 800566a:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <prvCheckTasksWaitingTermination+0x58>)
 800566c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800566e:	f000 fdf1 	bl	8006254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f810 	bl	8005698 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <prvCheckTasksWaitingTermination+0x58>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e1      	bne.n	8005644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000cc0 	.word	0x20000cc0
 8005690:	20000cec 	.word	0x20000cec
 8005694:	20000cd4 	.word	0x20000cd4

08005698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3354      	adds	r3, #84	; 0x54
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f949 	bl	800693c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d108      	bne.n	80056c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 ff89 	bl	80065d0 <vPortFree>
				vPortFree( pxTCB );
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 ff86 	bl	80065d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056c4:	e018      	b.n	80056f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d103      	bne.n	80056d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 ff7d 	bl	80065d0 <vPortFree>
	}
 80056d6:	e00f      	b.n	80056f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d00a      	beq.n	80056f8 <prvDeleteTCB+0x60>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60fb      	str	r3, [r7, #12]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <prvDeleteTCB+0x5e>
	}
 80056f8:	bf00      	nop
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <prvResetNextTaskUnblockTime+0x38>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <prvResetNextTaskUnblockTime+0x3c>)
 8005712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005718:	e008      	b.n	800572c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <prvResetNextTaskUnblockTime+0x38>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a04      	ldr	r2, [pc, #16]	; (800573c <prvResetNextTaskUnblockTime+0x3c>)
 800572a:	6013      	str	r3, [r2, #0]
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000ca4 	.word	0x20000ca4
 800573c:	20000d0c 	.word	0x20000d0c

08005740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <xTaskGetSchedulerState+0x34>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800574e:	2301      	movs	r3, #1
 8005750:	607b      	str	r3, [r7, #4]
 8005752:	e008      	b.n	8005766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005754:	4b08      	ldr	r3, [pc, #32]	; (8005778 <xTaskGetSchedulerState+0x38>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800575c:	2302      	movs	r3, #2
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	e001      	b.n	8005766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005766:	687b      	ldr	r3, [r7, #4]
	}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000cf8 	.word	0x20000cf8
 8005778:	20000d14 	.word	0x20000d14

0800577c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d056      	beq.n	8005840 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005792:	4b2e      	ldr	r3, [pc, #184]	; (800584c <xTaskPriorityDisinherit+0xd0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	429a      	cmp	r2, r3
 800579a:	d00a      	beq.n	80057b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60bb      	str	r3, [r7, #8]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d02c      	beq.n	8005840 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d128      	bne.n	8005840 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fc46 	bl	8004084 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <xTaskPriorityDisinherit+0xd4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <xTaskPriorityDisinherit+0xa4>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <xTaskPriorityDisinherit+0xd4>)
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4a09      	ldr	r2, [pc, #36]	; (8005854 <xTaskPriorityDisinherit+0xd8>)
 800582e:	441a      	add	r2, r3
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3304      	adds	r3, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4610      	mov	r0, r2
 8005838:	f7fe fbc7 	bl	8003fca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800583c:	2301      	movs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005840:	697b      	ldr	r3, [r7, #20]
	}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000818 	.word	0x20000818
 8005850:	20000cf4 	.word	0x20000cf4
 8005854:	2000081c 	.word	0x2000081c

08005858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005862:	4b21      	ldr	r3, [pc, #132]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fc08 	bl	8004084 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800587a:	d10a      	bne.n	8005892 <prvAddCurrentTaskToDelayedList+0x3a>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005882:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4819      	ldr	r0, [pc, #100]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800588c:	f7fe fb9d 	bl	8003fca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005890:	e026      	b.n	80058e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d209      	bcs.n	80058be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f7fe fbab 	bl	8004012 <vListInsert>
}
 80058bc:	e010      	b.n	80058e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fe fba1 	bl	8004012 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d202      	bcs.n	80058e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6013      	str	r3, [r2, #0]
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000cf0 	.word	0x20000cf0
 80058ec:	20000818 	.word	0x20000818
 80058f0:	20000cd8 	.word	0x20000cd8
 80058f4:	20000ca8 	.word	0x20000ca8
 80058f8:	20000ca4 	.word	0x20000ca4
 80058fc:	20000d0c 	.word	0x20000d0c

08005900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800590a:	f000 fb07 	bl	8005f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800590e:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <xTimerCreateTimerTask+0x80>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d021      	beq.n	800595a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800591e:	1d3a      	adds	r2, r7, #4
 8005920:	f107 0108 	add.w	r1, r7, #8
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fb07 	bl	8003f3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	9202      	str	r2, [sp, #8]
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	2302      	movs	r3, #2
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	460a      	mov	r2, r1
 8005940:	4910      	ldr	r1, [pc, #64]	; (8005984 <xTimerCreateTimerTask+0x84>)
 8005942:	4811      	ldr	r0, [pc, #68]	; (8005988 <xTimerCreateTimerTask+0x88>)
 8005944:	f7ff f8b4 	bl	8004ab0 <xTaskCreateStatic>
 8005948:	4603      	mov	r3, r0
 800594a:	4a10      	ldr	r2, [pc, #64]	; (800598c <xTimerCreateTimerTask+0x8c>)
 800594c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <xTimerCreateTimerTask+0x8c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	613b      	str	r3, [r7, #16]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000d48 	.word	0x20000d48
 8005984:	08006a44 	.word	0x08006a44
 8005988:	08005ac5 	.word	0x08005ac5
 800598c:	20000d4c 	.word	0x20000d4c

08005990 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xTimerGenericCommand+0x2e>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	623b      	str	r3, [r7, #32]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <xTimerGenericCommand+0x98>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02a      	beq.n	8005a1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	dc18      	bgt.n	8005a0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059d8:	f7ff feb2 	bl	8005740 <xTaskGetSchedulerState>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d109      	bne.n	80059f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <xTimerGenericCommand+0x98>)
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	f107 0110 	add.w	r1, r7, #16
 80059ea:	2300      	movs	r3, #0
 80059ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ee:	f7fe fc77 	bl	80042e0 <xQueueGenericSend>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24
 80059f4:	e012      	b.n	8005a1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <xTimerGenericCommand+0x98>)
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f107 0110 	add.w	r1, r7, #16
 80059fe:	2300      	movs	r3, #0
 8005a00:	2200      	movs	r2, #0
 8005a02:	f7fe fc6d 	bl	80042e0 <xQueueGenericSend>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24
 8005a08:	e008      	b.n	8005a1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a0a:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <xTimerGenericCommand+0x98>)
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f107 0110 	add.w	r1, r7, #16
 8005a12:	2300      	movs	r3, #0
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	f7fe fd61 	bl	80044dc <xQueueGenericSendFromISR>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3728      	adds	r7, #40	; 0x28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000d48 	.word	0x20000d48

08005a2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <prvProcessExpiredTimer+0x94>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fb1d 	bl	8004084 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d022      	beq.n	8005a9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	18d1      	adds	r1, r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f000 f8d1 	bl	8005c0c <prvInsertTimerInActiveList>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01f      	beq.n	8005ab0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f7ff ff88 	bl	8005990 <xTimerGenericCommand>
 8005a80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d113      	bne.n	8005ab0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	6978      	ldr	r0, [r7, #20]
 8005ab6:	4798      	blx	r3
}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000d40 	.word	0x20000d40

08005ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005acc:	f107 0308 	add.w	r3, r7, #8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f857 	bl	8005b84 <prvGetNextExpireTime>
 8005ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f803 	bl	8005ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ae2:	f000 f8d5 	bl	8005c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae6:	e7f1      	b.n	8005acc <prvTimerTask+0x8>

08005ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005af2:	f7ff fa39 	bl	8004f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f866 	bl	8005bcc <prvSampleTimeNow>
 8005b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d130      	bne.n	8005b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <prvProcessTimerOrBlockTask+0x3c>
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d806      	bhi.n	8005b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b16:	f7ff fa35 	bl	8004f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff85 	bl	8005a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b22:	e024      	b.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <prvProcessTimerOrBlockTask+0x90>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <prvProcessTimerOrBlockTask+0x50>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <prvProcessTimerOrBlockTask+0x52>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <prvProcessTimerOrBlockTask+0x94>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fe ff7d 	bl	8004a48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b4e:	f7ff fa19 	bl	8004f84 <xTaskResumeAll>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <prvProcessTimerOrBlockTask+0x98>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
}
 8005b68:	e001      	b.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b6a:	f7ff fa0b 	bl	8004f84 <xTaskResumeAll>
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000d44 	.word	0x20000d44
 8005b7c:	20000d48 	.word	0x20000d48
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <prvGetNextExpireTime+0x44>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <prvGetNextExpireTime+0x16>
 8005b96:	2201      	movs	r2, #1
 8005b98:	e000      	b.n	8005b9c <prvGetNextExpireTime+0x18>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvGetNextExpireTime+0x44>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e001      	b.n	8005bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000d40 	.word	0x20000d40

08005bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bd4:	f7ff fa74 	bl	80050c0 <xTaskGetTickCount>
 8005bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <prvSampleTimeNow+0x3c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d205      	bcs.n	8005bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005be4:	f000 f936 	bl	8005e54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bf6:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <prvSampleTimeNow+0x3c>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000d50 	.word	0x20000d50

08005c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d812      	bhi.n	8005c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d302      	bcc.n	8005c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e01b      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <prvInsertTimerInActiveList+0x7c>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7fe f9de 	bl	8004012 <vListInsert>
 8005c56:	e012      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d206      	bcs.n	8005c6e <prvInsertTimerInActiveList+0x62>
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e007      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <prvInsertTimerInActiveList+0x80>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fe f9ca 	bl	8004012 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000d44 	.word	0x20000d44
 8005c8c:	20000d40 	.word	0x20000d40

08005c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08e      	sub	sp, #56	; 0x38
 8005c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c96:	e0ca      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da18      	bge.n	8005cd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	61fb      	str	r3, [r7, #28]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc6:	6850      	ldr	r0, [r2, #4]
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	6892      	ldr	r2, [r2, #8]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f2c0 80aa 	blt.w	8005e2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe f9cb 	bl	8004084 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cee:	463b      	mov	r3, r7
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff ff6b 	bl	8005bcc <prvSampleTimeNow>
 8005cf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b09      	cmp	r3, #9
 8005cfc:	f200 8097 	bhi.w	8005e2e <prvProcessReceivedCommands+0x19e>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <prvProcessReceivedCommands+0x78>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d31 	.word	0x08005d31
 8005d14:	08005da5 	.word	0x08005da5
 8005d18:	08005db9 	.word	0x08005db9
 8005d1c:	08005e03 	.word	0x08005e03
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d31 	.word	0x08005d31
 8005d28:	08005da5 	.word	0x08005da5
 8005d2c:	08005db9 	.word	0x08005db9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	18d1      	adds	r1, r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d50:	f7ff ff5c 	bl	8005c0c <prvInsertTimerInActiveList>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d069      	beq.n	8005e2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05e      	beq.n	8005e2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	441a      	add	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d82:	f7ff fe05 	bl	8005990 <xTimerGenericCommand>
 8005d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d14f      	bne.n	8005e2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61bb      	str	r3, [r7, #24]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005db6:	e03a      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	617b      	str	r3, [r7, #20]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	18d1      	adds	r1, r2, r3
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfc:	f7ff ff06 	bl	8005c0c <prvInsertTimerInActiveList>
					break;
 8005e00:	e015      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e12:	f000 fbdd 	bl	80065d0 <vPortFree>
 8005e16:	e00a      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e2a:	e000      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e2e:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <prvProcessReceivedCommands+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1d39      	adds	r1, r7, #4
 8005e34:	2200      	movs	r2, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fbec 	bl	8004614 <xQueueReceive>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f47f af2a 	bne.w	8005c98 <prvProcessReceivedCommands+0x8>
	}
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	3730      	adds	r7, #48	; 0x30
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000d48 	.word	0x20000d48

08005e54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e5a:	e048      	b.n	8005eee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe f905 	bl	8004084 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02e      	beq.n	8005eee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d90e      	bls.n	8005ec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f7fe f8aa 	bl	8004012 <vListInsert>
 8005ebe:	e016      	b.n	8005eee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff fd60 	bl	8005990 <xTimerGenericCommand>
 8005ed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	603b      	str	r3, [r7, #0]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1b1      	bne.n	8005e5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <prvSwitchTimerLists+0xc4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005f04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f06:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <prvSwitchTimerLists+0xc4>)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	6013      	str	r3, [r2, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000d40 	.word	0x20000d40
 8005f18:	20000d44 	.word	0x20000d44

08005f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f22:	f000 f967 	bl	80061f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d120      	bne.n	8005f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f2e:	4814      	ldr	r0, [pc, #80]	; (8005f80 <prvCheckForValidListAndQueue+0x64>)
 8005f30:	f7fe f81e 	bl	8003f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f34:	4813      	ldr	r0, [pc, #76]	; (8005f84 <prvCheckForValidListAndQueue+0x68>)
 8005f36:	f7fe f81b 	bl	8003f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f3a:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <prvCheckForValidListAndQueue+0x6c>)
 8005f3c:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <prvCheckForValidListAndQueue+0x64>)
 8005f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <prvCheckForValidListAndQueue+0x70>)
 8005f42:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <prvCheckForValidListAndQueue+0x68>)
 8005f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <prvCheckForValidListAndQueue+0x74>)
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <prvCheckForValidListAndQueue+0x78>)
 8005f4e:	2110      	movs	r1, #16
 8005f50:	200a      	movs	r0, #10
 8005f52:	f7fe f929 	bl	80041a8 <xQueueGenericCreateStatic>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	490b      	ldr	r1, [pc, #44]	; (8005f98 <prvCheckForValidListAndQueue+0x7c>)
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fd42 	bl	80049f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f70:	f000 f970 	bl	8006254 <vPortExitCritical>
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000d48 	.word	0x20000d48
 8005f80:	20000d18 	.word	0x20000d18
 8005f84:	20000d2c 	.word	0x20000d2c
 8005f88:	20000d40 	.word	0x20000d40
 8005f8c:	20000d44 	.word	0x20000d44
 8005f90:	20000df4 	.word	0x20000df4
 8005f94:	20000d54 	.word	0x20000d54
 8005f98:	08006a4c 	.word	0x08006a4c

08005f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3b04      	subs	r3, #4
 8005fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f023 0201 	bic.w	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fcc:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <pxPortInitialiseStack+0x64>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b14      	subs	r3, #20
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f06f 0202 	mvn.w	r2, #2
 8005fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b20      	subs	r3, #32
 8005ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	08006005 	.word	0x08006005

08006004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <prvTaskExitError+0x54>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006016:	d00a      	beq.n	800602e <prvTaskExitError+0x2a>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <prvTaskExitError+0x28>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
}
 8006040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006042:	bf00      	nop
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0fc      	beq.n	8006044 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	2000000c 	.word	0x2000000c
 800605c:	00000000 	.word	0x00000000

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006088:	4808      	ldr	r0, [pc, #32]	; (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060aa:	bf00      	nop
 80060ac:	e000ed08 	.word	0xe000ed08

080060b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <xPortStartScheduler+0x120>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a46      	ldr	r2, [pc, #280]	; (80061d4 <xPortStartScheduler+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10a      	bne.n	80060d6 <xPortStartScheduler+0x26>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060d6:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <xPortStartScheduler+0x120>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <xPortStartScheduler+0x128>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10a      	bne.n	80060f6 <xPortStartScheduler+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xPortStartScheduler+0x12c>)
 80060f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006118:	b2da      	uxtb	r2, r3
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <xPortStartScheduler+0x130>)
 800611c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <xPortStartScheduler+0x134>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006124:	e009      	b.n	800613a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006126:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <xPortStartScheduler+0x134>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <xPortStartScheduler+0x134>)
 800612e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	b2db      	uxtb	r3, r3
 8006138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d0ef      	beq.n	8006126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006146:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <xPortStartScheduler+0x134>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1c3 0307 	rsb	r3, r3, #7
 800614e:	2b04      	cmp	r3, #4
 8006150:	d00a      	beq.n	8006168 <xPortStartScheduler+0xb8>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <xPortStartScheduler+0x134>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <xPortStartScheduler+0x134>)
 8006170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <xPortStartScheduler+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <xPortStartScheduler+0x134>)
 800617c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <xPortStartScheduler+0x138>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <xPortStartScheduler+0x138>)
 800618c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <xPortStartScheduler+0x138>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <xPortStartScheduler+0x138>)
 8006198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800619c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800619e:	f000 f8dd 	bl	800635c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <xPortStartScheduler+0x13c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061a8:	f000 f8fc 	bl	80063a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <xPortStartScheduler+0x140>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <xPortStartScheduler+0x140>)
 80061b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061b8:	f7ff ff66 	bl	8006088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061bc:	f7ff f84a 	bl	8005254 <vTaskSwitchContext>
	prvTaskExitError();
 80061c0:	f7ff ff20 	bl	8006004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	e000ed00 	.word	0xe000ed00
 80061d4:	410fc271 	.word	0x410fc271
 80061d8:	410fc270 	.word	0x410fc270
 80061dc:	e000e400 	.word	0xe000e400
 80061e0:	20000e44 	.word	0x20000e44
 80061e4:	20000e48 	.word	0x20000e48
 80061e8:	e000ed20 	.word	0xe000ed20
 80061ec:	2000000c 	.word	0x2000000c
 80061f0:	e000ef34 	.word	0xe000ef34

080061f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <vPortEnterCritical+0x58>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	4a0d      	ldr	r2, [pc, #52]	; (800624c <vPortEnterCritical+0x58>)
 8006216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <vPortEnterCritical+0x58>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10f      	bne.n	8006240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortEnterCritical+0x5c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <vPortEnterCritical+0x4c>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vPortEnterCritical+0x4a>
	}
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	2000000c 	.word	0x2000000c
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <vPortExitCritical+0x50>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vPortExitCritical+0x24>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	607b      	str	r3, [r7, #4]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <vPortExitCritical+0x50>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <vPortExitCritical+0x50>)
 8006280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <vPortExitCritical+0x42>
 800628a:	2300      	movs	r3, #0
 800628c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f383 8811 	msr	BASEPRI, r3
}
 8006294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c
	...

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7fe ffb8 	bl	8005254 <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7fe fed5 	bl	80050e0 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <xPortSysTickHandler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <vPortSetupTimerInterrupt+0x38>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <vPortSetupTimerInterrupt+0x3c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <vPortSetupTimerInterrupt+0x40>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <vPortSetupTimerInterrupt+0x44>)
 800637a:	3b01      	subs	r3, #1
 800637c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010
 8006394:	e000e018 	.word	0xe000e018
 8006398:	20000000 	.word	0x20000000
 800639c:	10624dd3 	.word	0x10624dd3
 80063a0:	e000e014 	.word	0xe000e014

080063a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063b4 <vPortEnableVFP+0x10>
 80063a8:	6801      	ldr	r1, [r0, #0]
 80063aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ae:	6001      	str	r1, [r0, #0]
 80063b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063b2:	bf00      	nop
 80063b4:	e000ed88 	.word	0xe000ed88

080063b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d914      	bls.n	80063f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <vPortValidateInterruptPriority+0x70>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063d4:	4b15      	ldr	r3, [pc, #84]	; (800642c <vPortValidateInterruptPriority+0x74>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	7afa      	ldrb	r2, [r7, #11]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d20a      	bcs.n	80063f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <vPortValidateInterruptPriority+0x78>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <vPortValidateInterruptPriority+0x7c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d90a      	bls.n	800641a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	603b      	str	r3, [r7, #0]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <vPortValidateInterruptPriority+0x60>
	}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	e000e3f0 	.word	0xe000e3f0
 800642c:	20000e44 	.word	0x20000e44
 8006430:	e000ed0c 	.word	0xe000ed0c
 8006434:	20000e48 	.word	0x20000e48

08006438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006444:	f7fe fd90 	bl	8004f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006448:	4b5b      	ldr	r3, [pc, #364]	; (80065b8 <pvPortMalloc+0x180>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006450:	f000 f920 	bl	8006694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006454:	4b59      	ldr	r3, [pc, #356]	; (80065bc <pvPortMalloc+0x184>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 8093 	bne.w	8006588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01d      	beq.n	80064a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006468:	2208      	movs	r2, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d014      	beq.n	80064a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	3308      	adds	r3, #8
 8006482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <pvPortMalloc+0x6c>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d06e      	beq.n	8006588 <pvPortMalloc+0x150>
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <pvPortMalloc+0x188>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d869      	bhi.n	8006588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064b4:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <pvPortMalloc+0x18c>)
 80064b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b8:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <pvPortMalloc+0x18c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064be:	e004      	b.n	80064ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <pvPortMalloc+0xa4>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f1      	bne.n	80064c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <pvPortMalloc+0x180>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d050      	beq.n	8006588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2208      	movs	r2, #8
 80064ec:	4413      	add	r3, r2
 80064ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	2308      	movs	r3, #8
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d91f      	bls.n	8006548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <pvPortMalloc+0xf8>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	613b      	str	r3, [r7, #16]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006542:	69b8      	ldr	r0, [r7, #24]
 8006544:	f000 f908 	bl	8006758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <pvPortMalloc+0x188>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <pvPortMalloc+0x188>)
 8006554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <pvPortMalloc+0x188>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <pvPortMalloc+0x190>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d203      	bcs.n	800656a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <pvPortMalloc+0x188>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <pvPortMalloc+0x190>)
 8006568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	431a      	orrs	r2, r3
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x194>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <pvPortMalloc+0x194>)
 8006586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006588:	f7fe fcfc 	bl	8004f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <pvPortMalloc+0x174>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <pvPortMalloc+0x172>
	return pvReturn;
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20001a0c 	.word	0x20001a0c
 80065bc:	20001a20 	.word	0x20001a20
 80065c0:	20001a10 	.word	0x20001a10
 80065c4:	20001a04 	.word	0x20001a04
 80065c8:	20001a14 	.word	0x20001a14
 80065cc:	20001a18 	.word	0x20001a18

080065d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04d      	beq.n	800667e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e2:	2308      	movs	r3, #8
 80065e4:	425b      	negs	r3, r3
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <vPortFree+0xb8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <vPortFree+0x44>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <vPortFree+0x62>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60bb      	str	r3, [r7, #8]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <vPortFree+0xb8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <vPortFree+0xb8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe fc86 	bl	8004f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortFree+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <vPortFree+0xbc>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f874 	bl	8006758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <vPortFree+0xc0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <vPortFree+0xc0>)
 8006678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800667a:	f7fe fc83 	bl	8004f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001a20 	.word	0x20001a20
 800668c:	20001a10 	.word	0x20001a10
 8006690:	20001a1c 	.word	0x20001a1c

08006694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800669e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a0:	4b27      	ldr	r3, [pc, #156]	; (8006740 <prvHeapInit+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <prvHeapInit+0xac>)
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <prvHeapInit+0xb0>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <prvHeapInit+0xb0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e0:	2208      	movs	r2, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <prvHeapInit+0xb4>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <prvHeapInit+0xb4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <prvHeapInit+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvHeapInit+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <prvHeapInit+0xb8>)
 8006722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <prvHeapInit+0xbc>)
 800672a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <prvHeapInit+0xc0>)
 800672e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20000e4c 	.word	0x20000e4c
 8006744:	20001a04 	.word	0x20001a04
 8006748:	20001a0c 	.word	0x20001a0c
 800674c:	20001a14 	.word	0x20001a14
 8006750:	20001a10 	.word	0x20001a10
 8006754:	20001a20 	.word	0x20001a20

08006758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <prvInsertBlockIntoFreeList+0xac>)
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <prvInsertBlockIntoFreeList+0x14>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d8f7      	bhi.n	8006766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d108      	bne.n	800679a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d118      	bne.n	80067e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00d      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e008      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d002      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20001a04 	.word	0x20001a04
 8006808:	20001a0c 	.word	0x20001a0c

0800680c <__libc_init_array>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4d0d      	ldr	r5, [pc, #52]	; (8006844 <__libc_init_array+0x38>)
 8006810:	4c0d      	ldr	r4, [pc, #52]	; (8006848 <__libc_init_array+0x3c>)
 8006812:	1b64      	subs	r4, r4, r5
 8006814:	10a4      	asrs	r4, r4, #2
 8006816:	2600      	movs	r6, #0
 8006818:	42a6      	cmp	r6, r4
 800681a:	d109      	bne.n	8006830 <__libc_init_array+0x24>
 800681c:	4d0b      	ldr	r5, [pc, #44]	; (800684c <__libc_init_array+0x40>)
 800681e:	4c0c      	ldr	r4, [pc, #48]	; (8006850 <__libc_init_array+0x44>)
 8006820:	f000 f8f4 	bl	8006a0c <_init>
 8006824:	1b64      	subs	r4, r4, r5
 8006826:	10a4      	asrs	r4, r4, #2
 8006828:	2600      	movs	r6, #0
 800682a:	42a6      	cmp	r6, r4
 800682c:	d105      	bne.n	800683a <__libc_init_array+0x2e>
 800682e:	bd70      	pop	{r4, r5, r6, pc}
 8006830:	f855 3b04 	ldr.w	r3, [r5], #4
 8006834:	4798      	blx	r3
 8006836:	3601      	adds	r6, #1
 8006838:	e7ee      	b.n	8006818 <__libc_init_array+0xc>
 800683a:	f855 3b04 	ldr.w	r3, [r5], #4
 800683e:	4798      	blx	r3
 8006840:	3601      	adds	r6, #1
 8006842:	e7f2      	b.n	800682a <__libc_init_array+0x1e>
 8006844:	08006b4c 	.word	0x08006b4c
 8006848:	08006b4c 	.word	0x08006b4c
 800684c:	08006b4c 	.word	0x08006b4c
 8006850:	08006b50 	.word	0x08006b50

08006854 <memcpy>:
 8006854:	440a      	add	r2, r1
 8006856:	4291      	cmp	r1, r2
 8006858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800685c:	d100      	bne.n	8006860 <memcpy+0xc>
 800685e:	4770      	bx	lr
 8006860:	b510      	push	{r4, lr}
 8006862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686a:	4291      	cmp	r1, r2
 800686c:	d1f9      	bne.n	8006862 <memcpy+0xe>
 800686e:	bd10      	pop	{r4, pc}

08006870 <memset>:
 8006870:	4402      	add	r2, r0
 8006872:	4603      	mov	r3, r0
 8006874:	4293      	cmp	r3, r2
 8006876:	d100      	bne.n	800687a <memset+0xa>
 8006878:	4770      	bx	lr
 800687a:	f803 1b01 	strb.w	r1, [r3], #1
 800687e:	e7f9      	b.n	8006874 <memset+0x4>

08006880 <_free_r>:
 8006880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006882:	2900      	cmp	r1, #0
 8006884:	d048      	beq.n	8006918 <_free_r+0x98>
 8006886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800688a:	9001      	str	r0, [sp, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f1a1 0404 	sub.w	r4, r1, #4
 8006892:	bfb8      	it	lt
 8006894:	18e4      	addlt	r4, r4, r3
 8006896:	f000 f8ad 	bl	80069f4 <__malloc_lock>
 800689a:	4a20      	ldr	r2, [pc, #128]	; (800691c <_free_r+0x9c>)
 800689c:	9801      	ldr	r0, [sp, #4]
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	4615      	mov	r5, r2
 80068a2:	b933      	cbnz	r3, 80068b2 <_free_r+0x32>
 80068a4:	6063      	str	r3, [r4, #4]
 80068a6:	6014      	str	r4, [r2, #0]
 80068a8:	b003      	add	sp, #12
 80068aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068ae:	f000 b8a7 	b.w	8006a00 <__malloc_unlock>
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	d90b      	bls.n	80068ce <_free_r+0x4e>
 80068b6:	6821      	ldr	r1, [r4, #0]
 80068b8:	1862      	adds	r2, r4, r1
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bf04      	itt	eq
 80068be:	681a      	ldreq	r2, [r3, #0]
 80068c0:	685b      	ldreq	r3, [r3, #4]
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	bf04      	itt	eq
 80068c6:	1852      	addeq	r2, r2, r1
 80068c8:	6022      	streq	r2, [r4, #0]
 80068ca:	602c      	str	r4, [r5, #0]
 80068cc:	e7ec      	b.n	80068a8 <_free_r+0x28>
 80068ce:	461a      	mov	r2, r3
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b10b      	cbz	r3, 80068d8 <_free_r+0x58>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x4e>
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	1855      	adds	r5, r2, r1
 80068dc:	42a5      	cmp	r5, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x78>
 80068e0:	6824      	ldr	r4, [r4, #0]
 80068e2:	4421      	add	r1, r4
 80068e4:	1854      	adds	r4, r2, r1
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	d1dd      	bne.n	80068a8 <_free_r+0x28>
 80068ec:	681c      	ldr	r4, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	4421      	add	r1, r4
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	e7d7      	b.n	80068a8 <_free_r+0x28>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x80>
 80068fa:	230c      	movs	r3, #12
 80068fc:	6003      	str	r3, [r0, #0]
 80068fe:	e7d3      	b.n	80068a8 <_free_r+0x28>
 8006900:	6825      	ldr	r5, [r4, #0]
 8006902:	1961      	adds	r1, r4, r5
 8006904:	428b      	cmp	r3, r1
 8006906:	bf04      	itt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1949      	addeq	r1, r1, r5
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6054      	str	r4, [r2, #4]
 8006916:	e7c7      	b.n	80068a8 <_free_r+0x28>
 8006918:	b003      	add	sp, #12
 800691a:	bd30      	pop	{r4, r5, pc}
 800691c:	20001a24 	.word	0x20001a24

08006920 <cleanup_glue>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	460c      	mov	r4, r1
 8006924:	6809      	ldr	r1, [r1, #0]
 8006926:	4605      	mov	r5, r0
 8006928:	b109      	cbz	r1, 800692e <cleanup_glue+0xe>
 800692a:	f7ff fff9 	bl	8006920 <cleanup_glue>
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006936:	f7ff bfa3 	b.w	8006880 <_free_r>
	...

0800693c <_reclaim_reent>:
 800693c:	4b2c      	ldr	r3, [pc, #176]	; (80069f0 <_reclaim_reent+0xb4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4283      	cmp	r3, r0
 8006942:	b570      	push	{r4, r5, r6, lr}
 8006944:	4604      	mov	r4, r0
 8006946:	d051      	beq.n	80069ec <_reclaim_reent+0xb0>
 8006948:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800694a:	b143      	cbz	r3, 800695e <_reclaim_reent+0x22>
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d14a      	bne.n	80069e8 <_reclaim_reent+0xac>
 8006952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006954:	6819      	ldr	r1, [r3, #0]
 8006956:	b111      	cbz	r1, 800695e <_reclaim_reent+0x22>
 8006958:	4620      	mov	r0, r4
 800695a:	f7ff ff91 	bl	8006880 <_free_r>
 800695e:	6961      	ldr	r1, [r4, #20]
 8006960:	b111      	cbz	r1, 8006968 <_reclaim_reent+0x2c>
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff ff8c 	bl	8006880 <_free_r>
 8006968:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800696a:	b111      	cbz	r1, 8006972 <_reclaim_reent+0x36>
 800696c:	4620      	mov	r0, r4
 800696e:	f7ff ff87 	bl	8006880 <_free_r>
 8006972:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006974:	b111      	cbz	r1, 800697c <_reclaim_reent+0x40>
 8006976:	4620      	mov	r0, r4
 8006978:	f7ff ff82 	bl	8006880 <_free_r>
 800697c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800697e:	b111      	cbz	r1, 8006986 <_reclaim_reent+0x4a>
 8006980:	4620      	mov	r0, r4
 8006982:	f7ff ff7d 	bl	8006880 <_free_r>
 8006986:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006988:	b111      	cbz	r1, 8006990 <_reclaim_reent+0x54>
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff ff78 	bl	8006880 <_free_r>
 8006990:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006992:	b111      	cbz	r1, 800699a <_reclaim_reent+0x5e>
 8006994:	4620      	mov	r0, r4
 8006996:	f7ff ff73 	bl	8006880 <_free_r>
 800699a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800699c:	b111      	cbz	r1, 80069a4 <_reclaim_reent+0x68>
 800699e:	4620      	mov	r0, r4
 80069a0:	f7ff ff6e 	bl	8006880 <_free_r>
 80069a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069a6:	b111      	cbz	r1, 80069ae <_reclaim_reent+0x72>
 80069a8:	4620      	mov	r0, r4
 80069aa:	f7ff ff69 	bl	8006880 <_free_r>
 80069ae:	69a3      	ldr	r3, [r4, #24]
 80069b0:	b1e3      	cbz	r3, 80069ec <_reclaim_reent+0xb0>
 80069b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069b4:	4620      	mov	r0, r4
 80069b6:	4798      	blx	r3
 80069b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069ba:	b1b9      	cbz	r1, 80069ec <_reclaim_reent+0xb0>
 80069bc:	4620      	mov	r0, r4
 80069be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069c2:	f7ff bfad 	b.w	8006920 <cleanup_glue>
 80069c6:	5949      	ldr	r1, [r1, r5]
 80069c8:	b941      	cbnz	r1, 80069dc <_reclaim_reent+0xa0>
 80069ca:	3504      	adds	r5, #4
 80069cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ce:	2d80      	cmp	r5, #128	; 0x80
 80069d0:	68d9      	ldr	r1, [r3, #12]
 80069d2:	d1f8      	bne.n	80069c6 <_reclaim_reent+0x8a>
 80069d4:	4620      	mov	r0, r4
 80069d6:	f7ff ff53 	bl	8006880 <_free_r>
 80069da:	e7ba      	b.n	8006952 <_reclaim_reent+0x16>
 80069dc:	680e      	ldr	r6, [r1, #0]
 80069de:	4620      	mov	r0, r4
 80069e0:	f7ff ff4e 	bl	8006880 <_free_r>
 80069e4:	4631      	mov	r1, r6
 80069e6:	e7ef      	b.n	80069c8 <_reclaim_reent+0x8c>
 80069e8:	2500      	movs	r5, #0
 80069ea:	e7ef      	b.n	80069cc <_reclaim_reent+0x90>
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	bf00      	nop
 80069f0:	20000010 	.word	0x20000010

080069f4 <__malloc_lock>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__malloc_lock+0x8>)
 80069f6:	f7fa ba80 	b.w	8000efa <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	20000090 	.word	0x20000090

08006a00 <__malloc_unlock>:
 8006a00:	4801      	ldr	r0, [pc, #4]	; (8006a08 <__malloc_unlock+0x8>)
 8006a02:	f7fa ba8e 	b.w	8000f22 <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	20000090 	.word	0x20000090

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
