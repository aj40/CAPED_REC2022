
CAPED-nucleo-l476rg-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c8  20000074  08004d60  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  08004d60  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fe9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffa  00000000  00000000  0003a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0003d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283e6  00000000  00000000  0003f560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155c0  00000000  00000000  00067946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbfd1  00000000  00000000  0007cf06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178ed7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051fc  00000000  00000000  00178f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bc4 	.word	0x08004bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004bc4 	.word	0x08004bc4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090
 80004f8:	20000144 	.word	0x20000144

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fa7b 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f833 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f8b3 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f881 	bl	8000614 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0x64>)
 8000514:	f107 041c 	add.w	r4, r7, #28
 8000518:	461d      	mov	r5, r3
 800051a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f002 ffff 	bl	8003530 <osThreadCreate>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0x68>)
 8000536:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <main+0x6c>)
 800053a:	463c      	mov	r4, r7
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800054a:	463b      	mov	r3, r7
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 ffee 	bl	8003530 <osThreadCreate>
 8000554:	4603      	mov	r3, r0
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <main+0x70>)
 8000558:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800055a:	f002 ffe2 	bl	8003522 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055e:	e7fe      	b.n	800055e <main+0x62>
 8000560:	08004bf4 	.word	0x08004bf4
 8000564:	20001054 	.word	0x20001054
 8000568:	08004c10 	.word	0x08004c10
 800056c:	20001058 	.word	0x20001058

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fa52 	bl	8004a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f000 fd23 	bl	8000fe0 <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 f8f0 	bl	8000784 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2302      	movs	r3, #2
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005be:	230a      	movs	r3, #10
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c2:	2307      	movs	r3, #7
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fd5a 	bl	800108c <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005de:	f000 f8d1 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2303      	movs	r3, #3
 80005e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2104      	movs	r1, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f92c 	bl	8001858 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000606:	f000 f8bd 	bl	8000784 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3758      	adds	r7, #88	; 0x58
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_USART2_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_USART2_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x58>)
 8000658:	f002 fac4 	bl	8002be4 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f88f 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000105c 	.word	0x2000105c
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a24      	ldr	r2, [pc, #144]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f000 fc4f 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4619      	mov	r1, r3
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0xc8>)
 800070e:	f000 fa97 	bl	8000c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000712:	2320      	movs	r3, #32
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 fa88 	bl	8000c40 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	; 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000800 	.word	0x48000800

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f002 ff3d 	bl	80035c8 <osDelay>
 800074e:	e7fb      	b.n	8000748 <StartDefaultTask+0x8>

08000750 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f002 ff35 	bl	80035c8 <osDelay>
 800075e:	e7fb      	b.n	8000758 <StartTask02+0x8>

08000760 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d101      	bne.n	8000776 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000772:	f000 f963 	bl	8000a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40001000 	.word	0x40001000

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_MspInit+0x4c>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_MspInit+0x4c>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_MspInit+0x4c>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 fa0d 	bl	8000bec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0ac      	sub	sp, #176	; 0xb0
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2288      	movs	r2, #136	; 0x88
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f004 f911 	bl	8004a28 <memset>
  if(huart->Instance==USART2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <HAL_UART_MspInit+0xb0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d13b      	bne.n	8000888 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000810:	2302      	movs	r3, #2
 8000812:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fa53 	bl	8001cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000828:	f7ff ffac 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_UART_MspInit+0xb4>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000830:	4a18      	ldr	r2, [pc, #96]	; (8000894 <HAL_UART_MspInit+0xb4>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000836:	6593      	str	r3, [r2, #88]	; 0x58
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_UART_MspInit+0xb4>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_UART_MspInit+0xb4>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_UART_MspInit+0xb4>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_UART_MspInit+0xb4>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085c:	230c      	movs	r3, #12
 800085e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000874:	2307      	movs	r3, #7
 8000876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 f9dc 	bl	8000c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	37b0      	adds	r7, #176	; 0xb0
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2036      	movs	r0, #54	; 0x36
 80008ae:	f000 f99d 	bl	8000bec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b2:	2036      	movs	r0, #54	; 0x36
 80008b4:	f000 f9b6 	bl	8000c24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <HAL_InitTick+0x9c>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <HAL_InitTick+0x9c>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6593      	str	r3, [r2, #88]	; 0x58
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <HAL_InitTick+0x9c>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	f003 0310 	and.w	r3, r3, #16
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 f962 	bl	8001ba4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e0:	f001 f934 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 80008e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <HAL_InitTick+0xa0>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	0c9b      	lsrs	r3, r3, #18
 80008f0:	3b01      	subs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_InitTick+0xa4>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <HAL_InitTick+0xa8>)
 80008f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_InitTick+0xa4>)
 80008fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_InitTick+0xa4>)
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_InitTick+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <HAL_InitTick+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_InitTick+0xa4>)
 8000916:	f001 fe93 	bl	8002640 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d104      	bne.n	800092a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000920:	4806      	ldr	r0, [pc, #24]	; (800093c <HAL_InitTick+0xa4>)
 8000922:	f001 feef 	bl	8002704 <HAL_TIM_Base_Start_IT>
 8000926:	4603      	mov	r3, r0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000
 8000938:	431bde83 	.word	0x431bde83
 800093c:	200010e0 	.word	0x200010e0
 8000940:	40001000 	.word	0x40001000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <TIM6_DAC_IRQHandler+0x10>)
 8000976:	f001 ff35 	bl	80027e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200010e0 	.word	0x200010e0

08000984 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff ffea 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f004 f801 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009da:	f7ff fd8f 	bl	80004fc <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009ec:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 80009f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009f4:	2000113c 	.word	0x2000113c

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_Init+0x3c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_Init+0x3c>)
 8000a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f000 f8df 	bl	8000bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f7ff ff3d 	bl	8000898 <HAL_InitTick>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	e001      	b.n	8000a2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a2a:	f7ff feb1 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40022000 	.word	0x40022000

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	2000112c 	.word	0x2000112c

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	2000112c 	.word	0x2000112c

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ff4c 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfe:	f7ff ff61 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	68b9      	ldr	r1, [r7, #8]
 8000c08:	6978      	ldr	r0, [r7, #20]
 8000c0a:	f7ff ffb1 	bl	8000b70 <NVIC_EncodePriority>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff80 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff54 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4e:	e17f      	b.n	8000f50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2101      	movs	r1, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 8171 	beq.w	8000f4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d005      	beq.n	8000c80 <HAL_GPIO_Init+0x40>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d118      	bne.n	8000d20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	08db      	lsrs	r3, r3, #3
 8000d0a:	f003 0201 	and.w	r2, r3, #1
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d017      	beq.n	8000d5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d123      	bne.n	8000db0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	08da      	lsrs	r2, r3, #3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3208      	adds	r2, #8
 8000d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	6939      	ldr	r1, [r7, #16]
 8000dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2203      	movs	r2, #3
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0203 	and.w	r2, r3, #3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 80ac 	beq.w	8000f4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <HAL_GPIO_Init+0x330>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	4a5e      	ldr	r2, [pc, #376]	; (8000f70 <HAL_GPIO_Init+0x330>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	; (8000f70 <HAL_GPIO_Init+0x330>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e0a:	4a5a      	ldr	r2, [pc, #360]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e34:	d025      	beq.n	8000e82 <HAL_GPIO_Init+0x242>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_GPIO_Init+0x338>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x23e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4e      	ldr	r2, [pc, #312]	; (8000f7c <HAL_GPIO_Init+0x33c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x23a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4d      	ldr	r2, [pc, #308]	; (8000f80 <HAL_GPIO_Init+0x340>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x236>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <HAL_GPIO_Init+0x344>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x232>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <HAL_GPIO_Init+0x348>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x22e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_GPIO_Init+0x34c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x22a>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00c      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e00a      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e72:	2304      	movs	r3, #4
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x244>
 8000e82:	2300      	movs	r3, #0
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e94:	4937      	ldr	r1, [pc, #220]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec6:	4a32      	ldr	r2, [pc, #200]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef0:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f1a:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f44:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f ae78 	bne.w	8000c50 <HAL_GPIO_Init+0x10>
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48001400 	.word	0x48001400
 8000f8c:	48001800 	.word	0x48001800
 8000f90:	40010400 	.word	0x40010400

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_PWREx_GetVoltageRange+0x18>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fee:	d130      	bne.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ffc:	d038      	beq.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2232      	movs	r2, #50	; 0x32
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	0c9b      	lsrs	r3, r3, #18
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001024:	e002      	b.n	800102c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3b01      	subs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001038:	d102      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x60>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f2      	bne.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800104c:	d110      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e00f      	b.n	8001072 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800105a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800105e:	d007      	beq.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001068:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40007000 	.word	0x40007000
 8001084:	20000000 	.word	0x20000000
 8001088:	431bde83 	.word	0x431bde83

0800108c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e3d4      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800109e:	4ba1      	ldr	r3, [pc, #644]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010a8:	4b9e      	ldr	r3, [pc, #632]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0310 	and.w	r3, r3, #16
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 80e4 	beq.w	8001288 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d007      	beq.n	80010d6 <HAL_RCC_OscConfig+0x4a>
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b0c      	cmp	r3, #12
 80010ca:	f040 808b 	bne.w	80011e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	f040 8087 	bne.w	80011e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010d6:	4b93      	ldr	r3, [pc, #588]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_RCC_OscConfig+0x62>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e3ac      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1a      	ldr	r2, [r3, #32]
 80010f2:	4b8c      	ldr	r3, [pc, #560]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_RCC_OscConfig+0x7c>
 80010fe:	4b89      	ldr	r3, [pc, #548]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001106:	e005      	b.n	8001114 <HAL_RCC_OscConfig+0x88>
 8001108:	4b86      	ldr	r3, [pc, #536]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001114:	4293      	cmp	r3, r2
 8001116:	d223      	bcs.n	8001160 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fd73 	bl	8001c08 <RCC_SetFlashLatencyFromMSIRange>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e38d      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800112c:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a7c      	ldr	r2, [pc, #496]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b7a      	ldr	r3, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4977      	ldr	r1, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114a:	4b76      	ldr	r3, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	4972      	ldr	r1, [pc, #456]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
 800115e:	e025      	b.n	80011ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001160:	4b70      	ldr	r3, [pc, #448]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a6f      	ldr	r2, [pc, #444]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	496a      	ldr	r1, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800117e:	4b69      	ldr	r3, [pc, #420]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4965      	ldr	r1, [pc, #404]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fd33 	bl	8001c08 <RCC_SetFlashLatencyFromMSIRange>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e34d      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ac:	f000 fc36 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b5c      	ldr	r3, [pc, #368]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	495a      	ldr	r1, [pc, #360]	; (8001328 <HAL_RCC_OscConfig+0x29c>)
 80011be:	5ccb      	ldrb	r3, [r1, r3]
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	4a58      	ldr	r2, [pc, #352]	; (800132c <HAL_RCC_OscConfig+0x2a0>)
 80011ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011cc:	4b58      	ldr	r3, [pc, #352]	; (8001330 <HAL_RCC_OscConfig+0x2a4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fb61 	bl	8000898 <HAL_InitTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d052      	beq.n	8001286 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	e331      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d032      	beq.n	8001252 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ec:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fc34 	bl	8000a64 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001200:	f7ff fc30 	bl	8000a64 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e31a      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001212:	4b44      	ldr	r3, [pc, #272]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a40      	ldr	r2, [pc, #256]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	493b      	ldr	r1, [pc, #236]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	4936      	ldr	r1, [pc, #216]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e01a      	b.n	8001288 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800125e:	f7ff fc01 	bl	8000a64 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001266:	f7ff fbfd 	bl	8000a64 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e2e7      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x1da>
 8001284:	e000      	b.n	8001288 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001286:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	d074      	beq.n	800137e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b08      	cmp	r3, #8
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x21a>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d10e      	bne.n	80012be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d10b      	bne.n	80012be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d064      	beq.n	800137c <HAL_RCC_OscConfig+0x2f0>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d160      	bne.n	800137c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e2c4      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x24a>
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e01d      	b.n	8001312 <HAL_RCC_OscConfig+0x286>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012de:	d10c      	bne.n	80012fa <HAL_RCC_OscConfig+0x26e>
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e00b      	b.n	8001312 <HAL_RCC_OscConfig+0x286>
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_RCC_OscConfig+0x298>)
 800130c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001310:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01c      	beq.n	8001354 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	f7ff fba3 	bl	8000a64 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001320:	e011      	b.n	8001346 <HAL_RCC_OscConfig+0x2ba>
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	08004c34 	.word	0x08004c34
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fb96 	bl	8000a64 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e280      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001346:	4baf      	ldr	r3, [pc, #700]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x2a8>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fb86 	bl	8000a64 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fb82 	bl	8000a64 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e26c      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800136e:	4ba5      	ldr	r3, [pc, #660]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x2d0>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d060      	beq.n	800144c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d005      	beq.n	800139c <HAL_RCC_OscConfig+0x310>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0c      	cmp	r3, #12
 8001394:	d119      	bne.n	80013ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d116      	bne.n	80013ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139c:	4b99      	ldr	r3, [pc, #612]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_OscConfig+0x328>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e249      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4b93      	ldr	r3, [pc, #588]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	4990      	ldr	r1, [pc, #576]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c8:	e040      	b.n	800144c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d023      	beq.n	800141a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d2:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a8b      	ldr	r2, [pc, #556]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff fb41 	bl	8000a64 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb3d 	bl	8000a64 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e227      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013f8:	4b82      	ldr	r3, [pc, #520]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b7f      	ldr	r3, [pc, #508]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	497c      	ldr	r1, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e018      	b.n	800144c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a79      	ldr	r2, [pc, #484]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001426:	f7ff fb1d 	bl	8000a64 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff fb19 	bl	8000a64 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e203      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001440:	4b70      	ldr	r3, [pc, #448]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d03c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01c      	beq.n	800149a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	4a67      	ldr	r2, [pc, #412]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff faf8 	bl	8000a64 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff faf4 	bl	8000a64 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e1de      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148a:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0ef      	beq.n	8001478 <HAL_RCC_OscConfig+0x3ec>
 8001498:	e01b      	b.n	80014d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800149c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a0:	4a58      	ldr	r2, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80014a2:	f023 0301 	bic.w	r3, r3, #1
 80014a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014aa:	f7ff fadb 	bl	8000a64 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b2:	f7ff fad7 	bl	8000a64 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1c1      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80014c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ef      	bne.n	80014b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 80a6 	beq.w	800162c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10d      	bne.n	800150c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	4b44      	ldr	r3, [pc, #272]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	4a43      	ldr	r2, [pc, #268]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80014f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fa:	6593      	str	r3, [r2, #88]	; 0x58
 80014fc:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001508:	2301      	movs	r3, #1
 800150a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150c:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_RCC_OscConfig+0x57c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d118      	bne.n	800154a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_RCC_OscConfig+0x57c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a3a      	ldr	r2, [pc, #232]	; (8001608 <HAL_RCC_OscConfig+0x57c>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001524:	f7ff fa9e 	bl	8000a64 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff fa9a 	bl	8000a64 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e184      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_RCC_OscConfig+0x57c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_RCC_OscConfig+0x4d8>
 8001552:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001558:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001562:	e024      	b.n	80015ae <HAL_RCC_OscConfig+0x522>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d110      	bne.n	800158e <HAL_RCC_OscConfig+0x502>
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	4a24      	ldr	r2, [pc, #144]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	4a20      	ldr	r2, [pc, #128]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800158c:	e00f      	b.n	80015ae <HAL_RCC_OscConfig+0x522>
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001594:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d016      	beq.n	80015e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa55 	bl	8000a64 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fa51 	bl	8000a64 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e139      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_RCC_OscConfig+0x578>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ed      	beq.n	80015be <HAL_RCC_OscConfig+0x532>
 80015e2:	e01a      	b.n	800161a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa3e 	bl	8000a64 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ea:	e00f      	b.n	800160c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fa3a 	bl	8000a64 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d906      	bls.n	800160c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e122      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160c:	4b90      	ldr	r3, [pc, #576]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e8      	bne.n	80015ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800161a:	7ffb      	ldrb	r3, [r7, #31]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001620:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8108 	beq.w	8001846 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	2b02      	cmp	r3, #2
 800163c:	f040 80d0 	bne.w	80017e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001640:	4b83      	ldr	r3, [pc, #524]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0203 	and.w	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	429a      	cmp	r2, r3
 8001652:	d130      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	3b01      	subs	r3, #1
 8001660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d127      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11f      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001680:	2a07      	cmp	r2, #7
 8001682:	bf14      	ite	ne
 8001684:	2201      	movne	r2, #1
 8001686:	2200      	moveq	r2, #0
 8001688:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	4293      	cmp	r3, r2
 800168c:	d113      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d109      	bne.n	80016b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	3b01      	subs	r3, #1
 80016b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d06e      	beq.n	8001794 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d069      	beq.n	8001790 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b7      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016d8:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5c      	ldr	r2, [pc, #368]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80016de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016e4:	f7ff f9be 	bl	8000a64 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff f9ba 	bl	8000a64 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0a4      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fe:	4b54      	ldr	r3, [pc, #336]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	4b51      	ldr	r3, [pc, #324]	; (8001854 <HAL_RCC_OscConfig+0x7c8>)
 8001710:	4013      	ands	r3, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800171a:	3a01      	subs	r2, #1
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	4311      	orrs	r1, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001724:	0212      	lsls	r2, r2, #8
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800172c:	0852      	lsrs	r2, r2, #1
 800172e:	3a01      	subs	r2, #1
 8001730:	0552      	lsls	r2, r2, #21
 8001732:	4311      	orrs	r1, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001738:	0852      	lsrs	r2, r2, #1
 800173a:	3a01      	subs	r2, #1
 800173c:	0652      	lsls	r2, r2, #25
 800173e:	4311      	orrs	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001744:	0912      	lsrs	r2, r2, #4
 8001746:	0452      	lsls	r2, r2, #17
 8001748:	430a      	orrs	r2, r1
 800174a:	4941      	ldr	r1, [pc, #260]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3e      	ldr	r2, [pc, #248]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001768:	f7ff f97c 	bl	8000a64 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff f978 	bl	8000a64 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e062      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178e:	e05a      	b.n	8001846 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e059      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d152      	bne.n	8001846 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017b8:	f7ff f954 	bl	8000a64 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff f950 	bl	8000a64 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e03a      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x734>
 80017de:	e032      	b.n	8001846 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b0c      	cmp	r3, #12
 80017e4:	d02d      	beq.n	8001842 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a19      	ldr	r2, [pc, #100]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001804:	f023 0303 	bic.w	r3, r3, #3
 8001808:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001810:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff f923 	bl	8000a64 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff f91f 	bl	8000a64 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e009      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x7c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x796>
 8001840:	e001      	b.n	8001846 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	f99d808c 	.word	0xf99d808c

08001858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0c8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d910      	bls.n	800189c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	4961      	ldr	r1, [pc, #388]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d001      	beq.n	800189c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b0      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d04c      	beq.n	8001942 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d107      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b0:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d121      	bne.n	8001900 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e09e      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d115      	bne.n	8001900 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e092      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e0:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e086      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e07e      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 0203 	bic.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	493f      	ldr	r1, [pc, #252]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001912:	f7ff f8a7 	bl	8000a64 <HAL_GetTick>
 8001916:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001918:	e00a      	b.n	8001930 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f7ff f8a3 	bl	8000a64 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e066      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 020c 	and.w	r2, r3, #12
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	429a      	cmp	r2, r3
 8001940:	d1eb      	bne.n	800191a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	492c      	ldr	r1, [pc, #176]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d210      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 0207 	bic.w	r2, r3, #7
 8001976:	4924      	ldr	r1, [pc, #144]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e036      	b.n	80019fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4918      	ldr	r1, [pc, #96]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4910      	ldr	r1, [pc, #64]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ce:	f000 f825 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_ClockConfig+0x1b4>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490c      	ldr	r1, [pc, #48]	; (8001a10 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe ff50 	bl	8000898 <HAL_InitTick>
 80019f8:	4603      	mov	r3, r0
 80019fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80019fc:	7afb      	ldrb	r3, [r7, #11]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08004c34 	.word	0x08004c34
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x34>
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d121      	bne.n	8001a8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d11e      	bne.n	8001a8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e005      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a78:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10d      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	e004      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d134      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d003      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ac0:	e005      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac4:	617b      	str	r3, [r7, #20]
      break;
 8001ac6:	e005      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aca:	617b      	str	r3, [r7, #20]
      break;
 8001acc:	e002      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	617b      	str	r3, [r7, #20]
      break;
 8001ad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	3301      	adds	r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	fb02 f203 	mul.w	r2, r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	0e5b      	lsrs	r3, r3, #25
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	3301      	adds	r3, #1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b14:	69bb      	ldr	r3, [r7, #24]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08004c4c 	.word	0x08004c4c
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200

08001b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4904      	ldr	r1, [pc, #16]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	f003 031f 	and.w	r3, r3, #31
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08004c44 	.word	0x08004c44

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b7c:	f7ff ffda 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4904      	ldr	r1, [pc, #16]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08004c44 	.word	0x08004c44

08001ba4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_GetClockConfig+0x5c>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_RCC_GetClockConfig+0x60>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0207 	and.w	r2, r3, #7
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40022000 	.word	0x40022000

08001c08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c20:	f7ff f9d0 	bl	8000fc4 <HAL_PWREx_GetVoltageRange>
 8001c24:	6178      	str	r0, [r7, #20]
 8001c26:	e014      	b.n	8001c52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6593      	str	r3, [r2, #88]	; 0x58
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c40:	f7ff f9c0 	bl	8000fc4 <HAL_PWREx_GetVoltageRange>
 8001c44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c58:	d10b      	bne.n	8001c72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b80      	cmp	r3, #128	; 0x80
 8001c5e:	d919      	bls.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2ba0      	cmp	r3, #160	; 0xa0
 8001c64:	d902      	bls.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c66:	2302      	movs	r3, #2
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	e013      	b.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	e010      	b.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b80      	cmp	r3, #128	; 0x80
 8001c76:	d902      	bls.n	8001c7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c78:	2303      	movs	r3, #3
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e00a      	b.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b80      	cmp	r3, #128	; 0x80
 8001c82:	d102      	bne.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c84:	2302      	movs	r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e004      	b.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b70      	cmp	r3, #112	; 0x70
 8001c8e:	d101      	bne.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 0207 	bic.w	r2, r3, #7
 8001c9c:	4909      	ldr	r1, [pc, #36]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d041      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cec:	d02a      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cf2:	d824      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cf8:	d008      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cfe:	d81e      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d08:	d010      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d0c:	4b86      	ldr	r3, [pc, #536]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4a85      	ldr	r2, [pc, #532]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d18:	e015      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fabb 	bl	800229c <RCCEx_PLLSAI1_Config>
 8001d26:	4603      	mov	r3, r0
 8001d28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d2a:	e00c      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3320      	adds	r3, #32
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fba6 	bl	8002484 <RCCEx_PLLSAI2_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d3c:	e003      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	74fb      	strb	r3, [r7, #19]
      break;
 8001d42:	e000      	b.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d46:	7cfb      	ldrb	r3, [r7, #19]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d4c:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5a:	4973      	ldr	r1, [pc, #460]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d62:	e001      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d64:	7cfb      	ldrb	r3, [r7, #19]
 8001d66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d041      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d7c:	d02a      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d82:	d824      	bhi.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d88:	d008      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d8e:	d81e      	bhi.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d98:	d010      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d9a:	e018      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d9c:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001da8:	e015      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa73 	bl	800229c <RCCEx_PLLSAI1_Config>
 8001db6:	4603      	mov	r3, r0
 8001db8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dba:	e00c      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3320      	adds	r3, #32
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fb5e 	bl	8002484 <RCCEx_PLLSAI2_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dcc:	e003      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	74fb      	strb	r3, [r7, #19]
      break;
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ddc:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dea:	494f      	ldr	r1, [pc, #316]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001df2:	e001      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a0 	beq.w	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00d      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a40      	ldr	r2, [pc, #256]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fe0c 	bl	8000a64 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e4e:	e009      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7fe fe08 	bl	8000a64 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d902      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	74fb      	strb	r3, [r7, #19]
        break;
 8001e62:	e005      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e64:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ef      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d15c      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01f      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d019      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d016      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7fe fdc7 	bl	8000a64 <HAL_GetTick>
 8001ed6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe fdc3 	bl	8000a64 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d902      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	74fb      	strb	r3, [r7, #19]
            break;
 8001ef0:	e006      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ec      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f16:	4904      	ldr	r1, [pc, #16]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f1e:	e009      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	74bb      	strb	r3, [r7, #18]
 8001f24:	e006      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f34:	7c7b      	ldrb	r3, [r7, #17]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b9e      	ldr	r3, [pc, #632]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	4a9d      	ldr	r2, [pc, #628]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f52:	4b98      	ldr	r3, [pc, #608]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f58:	f023 0203 	bic.w	r2, r3, #3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	4994      	ldr	r1, [pc, #592]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f74:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f023 020c 	bic.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	498c      	ldr	r1, [pc, #560]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f96:	4b87      	ldr	r3, [pc, #540]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	4983      	ldr	r1, [pc, #524]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	497b      	ldr	r1, [pc, #492]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	4972      	ldr	r1, [pc, #456]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ffc:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	496a      	ldr	r1, [pc, #424]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202c:	4961      	ldr	r1, [pc, #388]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002040:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	4959      	ldr	r1, [pc, #356]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002062:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002070:	4950      	ldr	r1, [pc, #320]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002084:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	4948      	ldr	r1, [pc, #288]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	493f      	ldr	r1, [pc, #252]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d028      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c8:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d6:	4937      	ldr	r1, [pc, #220]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e6:	d106      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f2:	60d3      	str	r3, [r2, #12]
 80020f4:	e011      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020fe:	d10c      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	2101      	movs	r1, #1
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f8c8 	bl	800229c <RCCEx_PLLSAI1_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d028      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	491f      	ldr	r1, [pc, #124]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002144:	d106      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4a1a      	ldr	r2, [pc, #104]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002150:	60d3      	str	r3, [r2, #12]
 8002152:	e011      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800215c:	d10c      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	2101      	movs	r1, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f899 	bl	800229c <RCCEx_PLLSAI1_Config>
 800216a:	4603      	mov	r3, r0
 800216c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800216e:	7cfb      	ldrb	r3, [r7, #19]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02b      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a2:	d109      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a02      	ldr	r2, [pc, #8]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ae:	60d3      	str	r3, [r2, #12]
 80021b0:	e014      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f867 	bl	800229c <RCCEx_PLLSAI1_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d02f      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021f6:	4928      	ldr	r1, [pc, #160]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002206:	d10d      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	2102      	movs	r1, #2
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f844 	bl	800229c <RCCEx_PLLSAI1_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d014      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	74bb      	strb	r3, [r7, #18]
 8002222:	e011      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222c:	d10c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3320      	adds	r3, #32
 8002232:	2102      	movs	r1, #2
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f925 	bl	8002484 <RCCEx_PLLSAI2_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002262:	490d      	ldr	r1, [pc, #52]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002286:	4904      	ldr	r1, [pc, #16]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800228e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000

0800229c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022aa:	4b75      	ldr	r3, [pc, #468]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d018      	beq.n	80022e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022b6:	4b72      	ldr	r3, [pc, #456]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0203 	and.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10d      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
       ||
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022ce:	4b6c      	ldr	r3, [pc, #432]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
       ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d047      	beq.n	8002372 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e044      	b.n	8002372 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d018      	beq.n	8002322 <RCCEx_PLLSAI1_Config+0x86>
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d825      	bhi.n	8002340 <RCCEx_PLLSAI1_Config+0xa4>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d002      	beq.n	80022fe <RCCEx_PLLSAI1_Config+0x62>
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d009      	beq.n	8002310 <RCCEx_PLLSAI1_Config+0x74>
 80022fc:	e020      	b.n	8002340 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022fe:	4b60      	ldr	r3, [pc, #384]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11d      	bne.n	8002346 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230e:	e01a      	b.n	8002346 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002310:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d116      	bne.n	800234a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002320:	e013      	b.n	800234a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002322:	4b57      	ldr	r3, [pc, #348]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800233e:	e006      	b.n	800234e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e004      	b.n	8002350 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002346:	bf00      	nop
 8002348:	e002      	b.n	8002350 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800234a:	bf00      	nop
 800234c:	e000      	b.n	8002350 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800234e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	430b      	orrs	r3, r1
 800236c:	4944      	ldr	r1, [pc, #272]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d17d      	bne.n	8002474 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002378:	4b41      	ldr	r3, [pc, #260]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a40      	ldr	r2, [pc, #256]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002384:	f7fe fb6e 	bl	8000a64 <HAL_GetTick>
 8002388:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800238a:	e009      	b.n	80023a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800238c:	f7fe fb6a 	bl	8000a64 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	73fb      	strb	r3, [r7, #15]
        break;
 800239e:	e005      	b.n	80023ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ef      	bne.n	800238c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d160      	bne.n	8002474 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6892      	ldr	r2, [r2, #8]
 80023c8:	0211      	lsls	r1, r2, #8
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68d2      	ldr	r2, [r2, #12]
 80023ce:	0912      	lsrs	r2, r2, #4
 80023d0:	0452      	lsls	r2, r2, #17
 80023d2:	430a      	orrs	r2, r1
 80023d4:	492a      	ldr	r1, [pc, #168]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	610b      	str	r3, [r1, #16]
 80023da:	e027      	b.n	800242c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d112      	bne.n	8002408 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6892      	ldr	r2, [r2, #8]
 80023f2:	0211      	lsls	r1, r2, #8
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6912      	ldr	r2, [r2, #16]
 80023f8:	0852      	lsrs	r2, r2, #1
 80023fa:	3a01      	subs	r2, #1
 80023fc:	0552      	lsls	r2, r2, #21
 80023fe:	430a      	orrs	r2, r1
 8002400:	491f      	ldr	r1, [pc, #124]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	610b      	str	r3, [r1, #16]
 8002406:	e011      	b.n	800242c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002410:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	0211      	lsls	r1, r2, #8
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6952      	ldr	r2, [r2, #20]
 800241e:	0852      	lsrs	r2, r2, #1
 8002420:	3a01      	subs	r2, #1
 8002422:	0652      	lsls	r2, r2, #25
 8002424:	430a      	orrs	r2, r1
 8002426:	4916      	ldr	r1, [pc, #88]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002436:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe fb14 	bl	8000a64 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800243e:	e009      	b.n	8002454 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002440:	f7fe fb10 	bl	8000a64 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	73fb      	strb	r3, [r7, #15]
          break;
 8002452:	e005      	b.n	8002460 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4904      	ldr	r1, [pc, #16]	; (8002480 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	4313      	orrs	r3, r2
 8002472:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002492:	4b6a      	ldr	r3, [pc, #424]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d018      	beq.n	80024d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800249e:	4b67      	ldr	r3, [pc, #412]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0203 	and.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d10d      	bne.n	80024ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
       ||
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024b6:	4b61      	ldr	r3, [pc, #388]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
       ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d047      	beq.n	800255a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e044      	b.n	800255a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d018      	beq.n	800250a <RCCEx_PLLSAI2_Config+0x86>
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d825      	bhi.n	8002528 <RCCEx_PLLSAI2_Config+0xa4>
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d002      	beq.n	80024e6 <RCCEx_PLLSAI2_Config+0x62>
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d009      	beq.n	80024f8 <RCCEx_PLLSAI2_Config+0x74>
 80024e4:	e020      	b.n	8002528 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024e6:	4b55      	ldr	r3, [pc, #340]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11d      	bne.n	800252e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f6:	e01a      	b.n	800252e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002508:	e013      	b.n	8002532 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002516:	4b49      	ldr	r3, [pc, #292]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002526:	e006      	b.n	8002536 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e004      	b.n	8002538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800252e:	bf00      	nop
 8002530:	e002      	b.n	8002538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002532:	bf00      	nop
 8002534:	e000      	b.n	8002538 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002536:	bf00      	nop
    }

    if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	430b      	orrs	r3, r1
 8002554:	4939      	ldr	r1, [pc, #228]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002556:	4313      	orrs	r3, r2
 8002558:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d167      	bne.n	8002630 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a35      	ldr	r2, [pc, #212]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7fe fa7a 	bl	8000a64 <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002572:	e009      	b.n	8002588 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002574:	f7fe fa76 	bl	8000a64 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d902      	bls.n	8002588 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	73fb      	strb	r3, [r7, #15]
        break;
 8002586:	e005      	b.n	8002594 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ef      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d14a      	bne.n	8002630 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d111      	bne.n	80025c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025a0:	4b26      	ldr	r3, [pc, #152]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6892      	ldr	r2, [r2, #8]
 80025b0:	0211      	lsls	r1, r2, #8
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68d2      	ldr	r2, [r2, #12]
 80025b6:	0912      	lsrs	r2, r2, #4
 80025b8:	0452      	lsls	r2, r2, #17
 80025ba:	430a      	orrs	r2, r1
 80025bc:	491f      	ldr	r1, [pc, #124]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	614b      	str	r3, [r1, #20]
 80025c2:	e011      	b.n	80025e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6892      	ldr	r2, [r2, #8]
 80025d4:	0211      	lsls	r1, r2, #8
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6912      	ldr	r2, [r2, #16]
 80025da:	0852      	lsrs	r2, r2, #1
 80025dc:	3a01      	subs	r2, #1
 80025de:	0652      	lsls	r2, r2, #25
 80025e0:	430a      	orrs	r2, r1
 80025e2:	4916      	ldr	r1, [pc, #88]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a13      	ldr	r2, [pc, #76]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fa36 	bl	8000a64 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025fa:	e009      	b.n	8002610 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025fc:	f7fe fa32 	bl	8000a64 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d902      	bls.n	8002610 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	73fb      	strb	r3, [r7, #15]
          break;
 800260e:	e005      	b.n	800261c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4904      	ldr	r1, [pc, #16]	; (800263c <RCCEx_PLLSAI2_Config+0x1b8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000

08002640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e049      	b.n	80026e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f841 	bl	80026ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 f9f8 	bl	8002a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d001      	beq.n	800271c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e04f      	b.n	80027bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a23      	ldr	r2, [pc, #140]	; (80027c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01d      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x76>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002746:	d018      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x76>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <HAL_TIM_Base_Start_IT+0xc8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x76>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x76>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x76>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIM_Base_Start_IT+0x76>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_TIM_Base_Start_IT+0xd8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d115      	bne.n	80027a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d015      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0xb4>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002792:	d011      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	e008      	b.n	80027b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e000      	b.n	80027ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40013400 	.word	0x40013400
 80027dc:	40014000 	.word	0x40014000
 80027e0:	00010007 	.word	0x00010007

080027e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b02      	cmp	r3, #2
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0202 	mvn.w	r2, #2
 8002810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f905 	bl	8002a36 <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8f7 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f908 	bl	8002a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b04      	cmp	r3, #4
 800284c:	d122      	bne.n	8002894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b04      	cmp	r3, #4
 800285a:	d11b      	bne.n	8002894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0204 	mvn.w	r2, #4
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8db 	bl	8002a36 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8cd 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8de 	bl	8002a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0208 	mvn.w	r2, #8
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2204      	movs	r2, #4
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8b1 	bl	8002a36 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f8a3 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8b4 	bl	8002a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b10      	cmp	r3, #16
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0210 	mvn.w	r2, #16
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2208      	movs	r2, #8
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f887 	bl	8002a36 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f879 	bl	8002a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f88a 	bl	8002a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d107      	bne.n	8002968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0201 	mvn.w	r2, #1
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd fefc 	bl	8000760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f914 	bl	8002bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a2:	d10e      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b80      	cmp	r3, #128	; 0x80
 80029b0:	d107      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f907 	bl	8002bd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d10e      	bne.n	80029ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d107      	bne.n	80029ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f838 	bl	8002a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d10e      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0220 	mvn.w	r2, #32
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f8c7 	bl	8002ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a40      	ldr	r2, [pc, #256]	; (8002b88 <TIM_Base_SetConfig+0x114>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d013      	beq.n	8002ab4 <TIM_Base_SetConfig+0x40>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d00f      	beq.n	8002ab4 <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3d      	ldr	r2, [pc, #244]	; (8002b8c <TIM_Base_SetConfig+0x118>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <TIM_Base_SetConfig+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <TIM_Base_SetConfig+0x11c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d007      	beq.n	8002ab4 <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <TIM_Base_SetConfig+0x120>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <TIM_Base_SetConfig+0x124>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d108      	bne.n	8002ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <TIM_Base_SetConfig+0x114>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01f      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad4:	d01b      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <TIM_Base_SetConfig+0x118>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d017      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <TIM_Base_SetConfig+0x11c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <TIM_Base_SetConfig+0x120>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00f      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <TIM_Base_SetConfig+0x124>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <TIM_Base_SetConfig+0x128>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d007      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <TIM_Base_SetConfig+0x12c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_Base_SetConfig+0x9a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <TIM_Base_SetConfig+0x130>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <TIM_Base_SetConfig+0x114>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00f      	beq.n	8002b6c <TIM_Base_SetConfig+0xf8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <TIM_Base_SetConfig+0x124>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d00b      	beq.n	8002b6c <TIM_Base_SetConfig+0xf8>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a11      	ldr	r2, [pc, #68]	; (8002b9c <TIM_Base_SetConfig+0x128>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <TIM_Base_SetConfig+0xf8>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <TIM_Base_SetConfig+0x12c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <TIM_Base_SetConfig+0xf8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <TIM_Base_SetConfig+0x130>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d103      	bne.n	8002b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	615a      	str	r2, [r3, #20]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	40013400 	.word	0x40013400
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800

08002ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e040      	b.n	8002c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7fd fdea 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2224      	movs	r2, #36	; 0x24
 8002c10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f82c 	bl	8002c80 <UART_SetConfig>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e022      	b.n	8002c78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 faaa 	bl	8003194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fb31 	bl	80032d8 <UART_CheckIdleState>
 8002c76:	4603      	mov	r3, r0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4bad      	ldr	r3, [pc, #692]	; (8002f60 <UART_SetConfig+0x2e0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	69f9      	ldr	r1, [r7, #28]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4aa2      	ldr	r2, [pc, #648]	; (8002f64 <UART_SetConfig+0x2e4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a99      	ldr	r2, [pc, #612]	; (8002f68 <UART_SetConfig+0x2e8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d121      	bne.n	8002d4a <UART_SetConfig+0xca>
 8002d06:	4b99      	ldr	r3, [pc, #612]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d817      	bhi.n	8002d44 <UART_SetConfig+0xc4>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <UART_SetConfig+0x9c>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d33 	.word	0x08002d33
 8002d28:	08002d3f 	.word	0x08002d3f
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	76fb      	strb	r3, [r7, #27]
 8002d30:	e0e7      	b.n	8002f02 <UART_SetConfig+0x282>
 8002d32:	2302      	movs	r3, #2
 8002d34:	76fb      	strb	r3, [r7, #27]
 8002d36:	e0e4      	b.n	8002f02 <UART_SetConfig+0x282>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	76fb      	strb	r3, [r7, #27]
 8002d3c:	e0e1      	b.n	8002f02 <UART_SetConfig+0x282>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	76fb      	strb	r3, [r7, #27]
 8002d42:	e0de      	b.n	8002f02 <UART_SetConfig+0x282>
 8002d44:	2310      	movs	r3, #16
 8002d46:	76fb      	strb	r3, [r7, #27]
 8002d48:	e0db      	b.n	8002f02 <UART_SetConfig+0x282>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a88      	ldr	r2, [pc, #544]	; (8002f70 <UART_SetConfig+0x2f0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d132      	bne.n	8002dba <UART_SetConfig+0x13a>
 8002d54:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d828      	bhi.n	8002db4 <UART_SetConfig+0x134>
 8002d62:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <UART_SetConfig+0xe8>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002db5 	.word	0x08002db5
 8002d70:	08002db5 	.word	0x08002db5
 8002d74:	08002db5 	.word	0x08002db5
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002db5 	.word	0x08002db5
 8002d88:	08002da3 	.word	0x08002da3
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002db5 	.word	0x08002db5
 8002d98:	08002daf 	.word	0x08002daf
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76fb      	strb	r3, [r7, #27]
 8002da0:	e0af      	b.n	8002f02 <UART_SetConfig+0x282>
 8002da2:	2302      	movs	r3, #2
 8002da4:	76fb      	strb	r3, [r7, #27]
 8002da6:	e0ac      	b.n	8002f02 <UART_SetConfig+0x282>
 8002da8:	2304      	movs	r3, #4
 8002daa:	76fb      	strb	r3, [r7, #27]
 8002dac:	e0a9      	b.n	8002f02 <UART_SetConfig+0x282>
 8002dae:	2308      	movs	r3, #8
 8002db0:	76fb      	strb	r3, [r7, #27]
 8002db2:	e0a6      	b.n	8002f02 <UART_SetConfig+0x282>
 8002db4:	2310      	movs	r3, #16
 8002db6:	76fb      	strb	r3, [r7, #27]
 8002db8:	e0a3      	b.n	8002f02 <UART_SetConfig+0x282>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6d      	ldr	r2, [pc, #436]	; (8002f74 <UART_SetConfig+0x2f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d120      	bne.n	8002e06 <UART_SetConfig+0x186>
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dce:	2b30      	cmp	r3, #48	; 0x30
 8002dd0:	d013      	beq.n	8002dfa <UART_SetConfig+0x17a>
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d814      	bhi.n	8002e00 <UART_SetConfig+0x180>
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d009      	beq.n	8002dee <UART_SetConfig+0x16e>
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d810      	bhi.n	8002e00 <UART_SetConfig+0x180>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <UART_SetConfig+0x168>
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d006      	beq.n	8002df4 <UART_SetConfig+0x174>
 8002de6:	e00b      	b.n	8002e00 <UART_SetConfig+0x180>
 8002de8:	2300      	movs	r3, #0
 8002dea:	76fb      	strb	r3, [r7, #27]
 8002dec:	e089      	b.n	8002f02 <UART_SetConfig+0x282>
 8002dee:	2302      	movs	r3, #2
 8002df0:	76fb      	strb	r3, [r7, #27]
 8002df2:	e086      	b.n	8002f02 <UART_SetConfig+0x282>
 8002df4:	2304      	movs	r3, #4
 8002df6:	76fb      	strb	r3, [r7, #27]
 8002df8:	e083      	b.n	8002f02 <UART_SetConfig+0x282>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	76fb      	strb	r3, [r7, #27]
 8002dfe:	e080      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e00:	2310      	movs	r3, #16
 8002e02:	76fb      	strb	r3, [r7, #27]
 8002e04:	e07d      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <UART_SetConfig+0x2f8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d120      	bne.n	8002e52 <UART_SetConfig+0x1d2>
 8002e10:	4b56      	ldr	r3, [pc, #344]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e1c:	d013      	beq.n	8002e46 <UART_SetConfig+0x1c6>
 8002e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e20:	d814      	bhi.n	8002e4c <UART_SetConfig+0x1cc>
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d009      	beq.n	8002e3a <UART_SetConfig+0x1ba>
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d810      	bhi.n	8002e4c <UART_SetConfig+0x1cc>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0x1b4>
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d006      	beq.n	8002e40 <UART_SetConfig+0x1c0>
 8002e32:	e00b      	b.n	8002e4c <UART_SetConfig+0x1cc>
 8002e34:	2300      	movs	r3, #0
 8002e36:	76fb      	strb	r3, [r7, #27]
 8002e38:	e063      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	76fb      	strb	r3, [r7, #27]
 8002e3e:	e060      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e40:	2304      	movs	r3, #4
 8002e42:	76fb      	strb	r3, [r7, #27]
 8002e44:	e05d      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e46:	2308      	movs	r3, #8
 8002e48:	76fb      	strb	r3, [r7, #27]
 8002e4a:	e05a      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	76fb      	strb	r3, [r7, #27]
 8002e50:	e057      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <UART_SetConfig+0x2fc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d125      	bne.n	8002ea8 <UART_SetConfig+0x228>
 8002e5c:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e6a:	d017      	beq.n	8002e9c <UART_SetConfig+0x21c>
 8002e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e70:	d817      	bhi.n	8002ea2 <UART_SetConfig+0x222>
 8002e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e76:	d00b      	beq.n	8002e90 <UART_SetConfig+0x210>
 8002e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7c:	d811      	bhi.n	8002ea2 <UART_SetConfig+0x222>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <UART_SetConfig+0x20a>
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e86:	d006      	beq.n	8002e96 <UART_SetConfig+0x216>
 8002e88:	e00b      	b.n	8002ea2 <UART_SetConfig+0x222>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	76fb      	strb	r3, [r7, #27]
 8002e8e:	e038      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e90:	2302      	movs	r3, #2
 8002e92:	76fb      	strb	r3, [r7, #27]
 8002e94:	e035      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e96:	2304      	movs	r3, #4
 8002e98:	76fb      	strb	r3, [r7, #27]
 8002e9a:	e032      	b.n	8002f02 <UART_SetConfig+0x282>
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	76fb      	strb	r3, [r7, #27]
 8002ea0:	e02f      	b.n	8002f02 <UART_SetConfig+0x282>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	76fb      	strb	r3, [r7, #27]
 8002ea6:	e02c      	b.n	8002f02 <UART_SetConfig+0x282>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2d      	ldr	r2, [pc, #180]	; (8002f64 <UART_SetConfig+0x2e4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d125      	bne.n	8002efe <UART_SetConfig+0x27e>
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec0:	d017      	beq.n	8002ef2 <UART_SetConfig+0x272>
 8002ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0x278>
 8002ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ecc:	d00b      	beq.n	8002ee6 <UART_SetConfig+0x266>
 8002ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed2:	d811      	bhi.n	8002ef8 <UART_SetConfig+0x278>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <UART_SetConfig+0x260>
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002edc:	d006      	beq.n	8002eec <UART_SetConfig+0x26c>
 8002ede:	e00b      	b.n	8002ef8 <UART_SetConfig+0x278>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e00d      	b.n	8002f02 <UART_SetConfig+0x282>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	76fb      	strb	r3, [r7, #27]
 8002eea:	e00a      	b.n	8002f02 <UART_SetConfig+0x282>
 8002eec:	2304      	movs	r3, #4
 8002eee:	76fb      	strb	r3, [r7, #27]
 8002ef0:	e007      	b.n	8002f02 <UART_SetConfig+0x282>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	76fb      	strb	r3, [r7, #27]
 8002ef6:	e004      	b.n	8002f02 <UART_SetConfig+0x282>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	76fb      	strb	r3, [r7, #27]
 8002efc:	e001      	b.n	8002f02 <UART_SetConfig+0x282>
 8002efe:	2310      	movs	r3, #16
 8002f00:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <UART_SetConfig+0x2e4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	f040 8087 	bne.w	800301c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f0e:	7efb      	ldrb	r3, [r7, #27]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d837      	bhi.n	8002f84 <UART_SetConfig+0x304>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <UART_SetConfig+0x29c>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f41 	.word	0x08002f41
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08002f85 	.word	0x08002f85
 8002f2c:	08002f4f 	.word	0x08002f4f
 8002f30:	08002f85 	.word	0x08002f85
 8002f34:	08002f85 	.word	0x08002f85
 8002f38:	08002f85 	.word	0x08002f85
 8002f3c:	08002f57 	.word	0x08002f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7fe fe04 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8002f44:	6178      	str	r0, [r7, #20]
        break;
 8002f46:	e022      	b.n	8002f8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <UART_SetConfig+0x300>)
 8002f4a:	617b      	str	r3, [r7, #20]
        break;
 8002f4c:	e01f      	b.n	8002f8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7fe fd65 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8002f52:	6178      	str	r0, [r7, #20]
        break;
 8002f54:	e01b      	b.n	8002f8e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5a:	617b      	str	r3, [r7, #20]
        break;
 8002f5c:	e017      	b.n	8002f8e <UART_SetConfig+0x30e>
 8002f5e:	bf00      	nop
 8002f60:	efff69f3 	.word	0xefff69f3
 8002f64:	40008000 	.word	0x40008000
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40004400 	.word	0x40004400
 8002f74:	40004800 	.word	0x40004800
 8002f78:	40004c00 	.word	0x40004c00
 8002f7c:	40005000 	.word	0x40005000
 8002f80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	76bb      	strb	r3, [r7, #26]
        break;
 8002f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80f1 	beq.w	8003178 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d305      	bcc.n	8002fb2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d902      	bls.n	8002fb8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	76bb      	strb	r3, [r7, #26]
 8002fb6:	e0df      	b.n	8003178 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	020b      	lsls	r3, r1, #8
 8002fca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fce:	0202      	lsls	r2, r0, #8
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	6849      	ldr	r1, [r1, #4]
 8002fd4:	0849      	lsrs	r1, r1, #1
 8002fd6:	4608      	mov	r0, r1
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	1814      	adds	r4, r2, r0
 8002fde:	eb43 0501 	adc.w	r5, r3, r1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	4620      	mov	r0, r4
 8002fee:	4629      	mov	r1, r5
 8002ff0:	f7fd f8ee 	bl	80001d0 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003002:	d308      	bcc.n	8003016 <UART_SetConfig+0x396>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300a:	d204      	bcs.n	8003016 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	e0b0      	b.n	8003178 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	76bb      	strb	r3, [r7, #26]
 800301a:	e0ad      	b.n	8003178 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003024:	d15b      	bne.n	80030de <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003026:	7efb      	ldrb	r3, [r7, #27]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d828      	bhi.n	800307e <UART_SetConfig+0x3fe>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <UART_SetConfig+0x3b4>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003059 	.word	0x08003059
 8003038:	08003061 	.word	0x08003061
 800303c:	08003069 	.word	0x08003069
 8003040:	0800307f 	.word	0x0800307f
 8003044:	0800306f 	.word	0x0800306f
 8003048:	0800307f 	.word	0x0800307f
 800304c:	0800307f 	.word	0x0800307f
 8003050:	0800307f 	.word	0x0800307f
 8003054:	08003077 	.word	0x08003077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7fe fd78 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 800305c:	6178      	str	r0, [r7, #20]
        break;
 800305e:	e013      	b.n	8003088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003060:	f7fe fd8a 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8003064:	6178      	str	r0, [r7, #20]
        break;
 8003066:	e00f      	b.n	8003088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003068:	4b49      	ldr	r3, [pc, #292]	; (8003190 <UART_SetConfig+0x510>)
 800306a:	617b      	str	r3, [r7, #20]
        break;
 800306c:	e00c      	b.n	8003088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800306e:	f7fe fcd5 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 8003072:	6178      	str	r0, [r7, #20]
        break;
 8003074:	e008      	b.n	8003088 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307a:	617b      	str	r3, [r7, #20]
        break;
 800307c:	e004      	b.n	8003088 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	76bb      	strb	r3, [r7, #26]
        break;
 8003086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d074      	beq.n	8003178 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005a      	lsls	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	d916      	bls.n	80030d8 <UART_SetConfig+0x458>
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d212      	bcs.n	80030d8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f023 030f 	bic.w	r3, r3, #15
 80030ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	89fa      	ldrh	r2, [r7, #14]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	e04f      	b.n	8003178 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	76bb      	strb	r3, [r7, #26]
 80030dc:	e04c      	b.n	8003178 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030de:	7efb      	ldrb	r3, [r7, #27]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d828      	bhi.n	8003136 <UART_SetConfig+0x4b6>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <UART_SetConfig+0x46c>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003111 	.word	0x08003111
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003121 	.word	0x08003121
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003127 	.word	0x08003127
 8003100:	08003137 	.word	0x08003137
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
 800310c:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003110:	f7fe fd1c 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 8003114:	6178      	str	r0, [r7, #20]
        break;
 8003116:	e013      	b.n	8003140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003118:	f7fe fd2e 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 800311c:	6178      	str	r0, [r7, #20]
        break;
 800311e:	e00f      	b.n	8003140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <UART_SetConfig+0x510>)
 8003122:	617b      	str	r3, [r7, #20]
        break;
 8003124:	e00c      	b.n	8003140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003126:	f7fe fc79 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 800312a:	6178      	str	r0, [r7, #20]
        break;
 800312c:	e008      	b.n	8003140 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	617b      	str	r3, [r7, #20]
        break;
 8003134:	e004      	b.n	8003140 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	76bb      	strb	r3, [r7, #26]
        break;
 800313e:	bf00      	nop
    }

    if (pclk != 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d018      	beq.n	8003178 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	085a      	lsrs	r2, r3, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	441a      	add	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d909      	bls.n	8003174 <UART_SetConfig+0x4f4>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d205      	bcs.n	8003174 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b29a      	uxth	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	e001      	b.n	8003178 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003184:	7ebb      	ldrb	r3, [r7, #26]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	bf00      	nop
 8003190:	00f42400 	.word	0x00f42400

08003194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01a      	beq.n	80032aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003292:	d10a      	bne.n	80032aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e8:	f7fd fbbc 	bl	8000a64 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d10e      	bne.n	800331a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f82d 	bl	800336a <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e023      	b.n	8003362 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b04      	cmp	r3, #4
 8003326:	d10e      	bne.n	8003346 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f817 	bl	800336a <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e00d      	b.n	8003362 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b09c      	sub	sp, #112	; 0x70
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337a:	e0a5      	b.n	80034c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	f000 80a1 	beq.w	80034c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7fd fb6d 	bl	8000a64 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <UART_WaitOnFlagUntilTimeout+0x32>
 8003396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003398:	2b00      	cmp	r3, #0
 800339a:	d13e      	bne.n	800341a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b0:	667b      	str	r3, [r7, #100]	; 0x64
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e6      	bne.n	800339c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	663b      	str	r3, [r7, #96]	; 0x60
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3308      	adds	r3, #8
 80033ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e5      	bne.n	80033ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e067      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d04f      	beq.n	80034c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003436:	d147      	bne.n	80034c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003440:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
 8003462:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e6      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3308      	adds	r3, #8
 800347a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	613b      	str	r3, [r7, #16]
   return(result);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	66bb      	str	r3, [r7, #104]	; 0x68
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3308      	adds	r3, #8
 8003492:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003494:	623a      	str	r2, [r7, #32]
 8003496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	69f9      	ldr	r1, [r7, #28]
 800349a:	6a3a      	ldr	r2, [r7, #32]
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e5      	bne.n	8003474 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e010      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69da      	ldr	r2, [r3, #28]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	f43f af4a 	beq.w	800337c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3770      	adds	r7, #112	; 0x70
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003504:	2b84      	cmp	r3, #132	; 0x84
 8003506:	d005      	beq.n	8003514 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	3303      	adds	r3, #3
 8003512:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003526:	f000 faf5 	bl	8003b14 <vTaskStartScheduler>
  
  return osOK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}

08003530 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af04      	add	r7, sp, #16
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <osThreadCreate+0x54>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01c      	beq.n	8003584 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685c      	ldr	r4, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691e      	ldr	r6, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ffc8 	bl	80034f2 <makeFreeRtosPriority>
 8003562:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800356c:	9202      	str	r2, [sp, #8]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	9100      	str	r1, [sp, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	4632      	mov	r2, r6
 8003576:	4629      	mov	r1, r5
 8003578:	4620      	mov	r0, r4
 800357a:	f000 f8ed 	bl	8003758 <xTaskCreateStatic>
 800357e:	4603      	mov	r3, r0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	e01c      	b.n	80035be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685c      	ldr	r4, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003590:	b29e      	uxth	r6, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ffaa 	bl	80034f2 <makeFreeRtosPriority>
 800359e:	4602      	mov	r2, r0
 80035a0:	f107 030c 	add.w	r3, r7, #12
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	9200      	str	r2, [sp, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4632      	mov	r2, r6
 80035ac:	4629      	mov	r1, r5
 80035ae:	4620      	mov	r0, r4
 80035b0:	f000 f92f 	bl	8003812 <xTaskCreate>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <osDelay+0x16>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	e000      	b.n	80035e0 <osDelay+0x18>
 80035de:	2301      	movs	r3, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa63 	bl	8003aac <vTaskDelay>
  
  return osOK;
 80035e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f103 0208 	add.w	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f103 0208 	add.w	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f103 0208 	add.w	r2, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d103      	bne.n	80036b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e00c      	b.n	80036cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3308      	adds	r3, #8
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e002      	b.n	80036c0 <vListInsert+0x2e>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d2f6      	bcs.n	80036ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d103      	bne.n	8003738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af04      	add	r7, sp, #16
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800377e:	bf00      	nop
 8003780:	e7fe      	b.n	8003780 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <xTaskCreateStatic+0x46>
	__asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	61fb      	str	r3, [r7, #28]
}
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800379e:	23b4      	movs	r3, #180	; 0xb4
 80037a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2bb4      	cmp	r3, #180	; 0xb4
 80037a6:	d00a      	beq.n	80037be <xTaskCreateStatic+0x66>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	61bb      	str	r3, [r7, #24]
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01e      	beq.n	8003804 <xTaskCreateStatic+0xac>
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037de:	2300      	movs	r3, #0
 80037e0:	9303      	str	r3, [sp, #12]
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	9302      	str	r3, [sp, #8]
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f850 	bl	800389c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037fe:	f000 f8eb 	bl	80039d8 <prvAddNewTaskToReadyList>
 8003802:	e001      	b.n	8003808 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003808:	697b      	ldr	r3, [r7, #20]
	}
 800380a:	4618      	mov	r0, r3
 800380c:	3728      	adds	r7, #40	; 0x28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08c      	sub	sp, #48	; 0x30
 8003816:	af04      	add	r7, sp, #16
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003822:	88fb      	ldrh	r3, [r7, #6]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4618      	mov	r0, r3
 8003828:	f000 feee 	bl	8004608 <pvPortMalloc>
 800382c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003834:	20b4      	movs	r0, #180	; 0xb4
 8003836:	f000 fee7 	bl	8004608 <pvPortMalloc>
 800383a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
 8003848:	e005      	b.n	8003856 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800384a:	6978      	ldr	r0, [r7, #20]
 800384c:	f000 ffa8 	bl	80047a0 <vPortFree>
 8003850:	e001      	b.n	8003856 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003864:	88fa      	ldrh	r2, [r7, #6]
 8003866:	2300      	movs	r3, #0
 8003868:	9303      	str	r3, [sp, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f80e 	bl	800389c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003880:	69f8      	ldr	r0, [r7, #28]
 8003882:	f000 f8a9 	bl	80039d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e002      	b.n	8003892 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800388c:	f04f 33ff 	mov.w	r3, #4294967295
 8003890:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003892:	69bb      	ldr	r3, [r7, #24]
	}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038b4:	3b01      	subs	r3, #1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f023 0307 	bic.w	r3, r3, #7
 80038c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	617b      	str	r3, [r7, #20]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01f      	beq.n	800392a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	e012      	b.n	8003916 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	7819      	ldrb	r1, [r3, #0]
 80038f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	3334      	adds	r3, #52	; 0x34
 8003900:	460a      	mov	r2, r1
 8003902:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d006      	beq.n	800391e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d9e9      	bls.n	80038f0 <prvInitialiseNewTask+0x54>
 800391c:	e000      	b.n	8003920 <prvInitialiseNewTask+0x84>
			{
				break;
 800391e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003928:	e003      	b.n	8003932 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	2b06      	cmp	r3, #6
 8003936:	d901      	bls.n	800393c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003938:	2306      	movs	r3, #6
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	2200      	movs	r2, #0
 800394c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	3304      	adds	r3, #4
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fe6c 	bl	8003630 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	3318      	adds	r3, #24
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe67 	bl	8003630 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f1c3 0207 	rsb	r2, r3, #7
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	2200      	movs	r2, #0
 800397c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	2200      	movs	r2, #0
 8003984:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	334c      	adds	r3, #76	; 0x4c
 800398c:	2260      	movs	r2, #96	; 0x60
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f849 	bl	8004a28 <memset>
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	4a0c      	ldr	r2, [pc, #48]	; (80039cc <prvInitialiseNewTask+0x130>)
 800399a:	651a      	str	r2, [r3, #80]	; 0x50
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <prvInitialiseNewTask+0x134>)
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	4a0b      	ldr	r2, [pc, #44]	; (80039d4 <prvInitialiseNewTask+0x138>)
 80039a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	69b8      	ldr	r0, [r7, #24]
 80039ae:	f000 fc1f 	bl	80041f0 <pxPortInitialiseStack>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039c4:	bf00      	nop
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	08004c9c 	.word	0x08004c9c
 80039d0:	08004cbc 	.word	0x08004cbc
 80039d4:	08004c7c 	.word	0x08004c7c

080039d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039e0:	f000 fd30 	bl	8004444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039e4:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <prvAddNewTaskToReadyList+0xb8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <prvAddNewTaskToReadyList+0xb8>)
 80039ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039f6:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <prvAddNewTaskToReadyList+0xb8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d110      	bne.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a04:	f000 facc 	bl	8003fa0 <prvInitialiseTaskLists>
 8003a08:	e00d      	b.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <prvAddNewTaskToReadyList+0xc0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d802      	bhi.n	8003a26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a20:	4a1c      	ldr	r2, [pc, #112]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <prvAddNewTaskToReadyList+0xc4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <prvAddNewTaskToReadyList+0xc4>)
 8003a2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	2201      	movs	r2, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <prvAddNewTaskToReadyList+0xc8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <prvAddNewTaskToReadyList+0xcc>)
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f7ff fdf6 	bl	800364a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a5e:	f000 fd21 	bl	80044a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <prvAddNewTaskToReadyList+0xc0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <prvAddNewTaskToReadyList+0xbc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d207      	bcs.n	8003a88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <prvAddNewTaskToReadyList+0xd0>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000444 	.word	0x20000444
 8003a94:	20000344 	.word	0x20000344
 8003a98:	20000450 	.word	0x20000450
 8003a9c:	20000460 	.word	0x20000460
 8003aa0:	2000044c 	.word	0x2000044c
 8003aa4:	20000348 	.word	0x20000348
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d017      	beq.n	8003aee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <vTaskDelay+0x60>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <vTaskDelay+0x30>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	60bb      	str	r3, [r7, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003adc:	f000 f884 	bl	8003be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fb1e 	bl	8004124 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ae8:	f000 f88c 	bl	8003c04 <xTaskResumeAll>
 8003aec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <vTaskDelay+0x64>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	2000046c 	.word	0x2000046c
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b22:	463a      	mov	r2, r7
 8003b24:	1d39      	adds	r1, r7, #4
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fccc 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b30:	6839      	ldr	r1, [r7, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	9202      	str	r2, [sp, #8]
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	460a      	mov	r2, r1
 8003b42:	4921      	ldr	r1, [pc, #132]	; (8003bc8 <vTaskStartScheduler+0xb4>)
 8003b44:	4821      	ldr	r0, [pc, #132]	; (8003bcc <vTaskStartScheduler+0xb8>)
 8003b46:	f7ff fe07 	bl	8003758 <xTaskCreateStatic>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a20      	ldr	r2, [pc, #128]	; (8003bd0 <vTaskStartScheduler+0xbc>)
 8003b4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <vTaskStartScheduler+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	e001      	b.n	8003b62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11b      	bne.n	8003ba0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	613b      	str	r3, [r7, #16]
}
 8003b7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <vTaskStartScheduler+0xc0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	334c      	adds	r3, #76	; 0x4c
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <vTaskStartScheduler+0xc4>)
 8003b84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <vTaskStartScheduler+0xc8>)
 8003b88:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <vTaskStartScheduler+0xcc>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b94:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <vTaskStartScheduler+0xd0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b9a:	f000 fbb1 	bl	8004300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b9e:	e00e      	b.n	8003bbe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d10a      	bne.n	8003bbe <vTaskStartScheduler+0xaa>
	__asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
}
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <vTaskStartScheduler+0xa8>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	08004c2c 	.word	0x08004c2c
 8003bcc:	08003f71 	.word	0x08003f71
 8003bd0:	20000468 	.word	0x20000468
 8003bd4:	20000344 	.word	0x20000344
 8003bd8:	20000010 	.word	0x20000010
 8003bdc:	20000464 	.word	0x20000464
 8003be0:	20000450 	.word	0x20000450
 8003be4:	20000448 	.word	0x20000448

08003be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <vTaskSuspendAll+0x18>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <vTaskSuspendAll+0x18>)
 8003bf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	2000046c 	.word	0x2000046c

08003c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	603b      	str	r3, [r7, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c30:	f000 fc08 	bl	8004444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c34:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	4a37      	ldr	r2, [pc, #220]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <xTaskResumeAll+0x114>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d161      	bne.n	8003d0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <xTaskResumeAll+0x118>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d05d      	beq.n	8003d0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c4e:	e02e      	b.n	8003cae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b33      	ldr	r3, [pc, #204]	; (8003d20 <xTaskResumeAll+0x11c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fd51 	bl	8003704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fd4c 	bl	8003704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2201      	movs	r2, #1
 8003c72:	409a      	lsls	r2, r3
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <xTaskResumeAll+0x120>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	; (8003d24 <xTaskResumeAll+0x120>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <xTaskResumeAll+0x124>)
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f7ff fcd8 	bl	800364a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <xTaskResumeAll+0x128>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <xTaskResumeAll+0x12c>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <xTaskResumeAll+0x11c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1cc      	bne.n	8003c50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cbc:	f000 fa12 	bl	80040e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <xTaskResumeAll+0x130>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ccc:	f000 f836 	bl	8003d3c <xTaskIncrementTick>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003cd6:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <xTaskResumeAll+0x12c>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f1      	bne.n	8003ccc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <xTaskResumeAll+0x130>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <xTaskResumeAll+0x12c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <xTaskResumeAll+0x134>)
 8003cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d0a:	f000 fbcb 	bl	80044a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	2000046c 	.word	0x2000046c
 8003d1c:	20000444 	.word	0x20000444
 8003d20:	20000404 	.word	0x20000404
 8003d24:	2000044c 	.word	0x2000044c
 8003d28:	20000348 	.word	0x20000348
 8003d2c:	20000344 	.word	0x20000344
 8003d30:	20000458 	.word	0x20000458
 8003d34:	20000454 	.word	0x20000454
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d46:	4b4e      	ldr	r3, [pc, #312]	; (8003e80 <xTaskIncrementTick+0x144>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 808e 	bne.w	8003e6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d50:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <xTaskIncrementTick+0x148>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d58:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <xTaskIncrementTick+0x148>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d120      	bne.n	8003da6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <xTaskIncrementTick+0x48>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	603b      	str	r3, [r7, #0]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xTaskIncrementTick+0x46>
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	4b40      	ldr	r3, [pc, #256]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3e      	ldr	r2, [pc, #248]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <xTaskIncrementTick+0x150>)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <xTaskIncrementTick+0x154>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <xTaskIncrementTick+0x154>)
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	f000 f99f 	bl	80040e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003da6:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d348      	bcc.n	8003e42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	4b36      	ldr	r3, [pc, #216]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	601a      	str	r2, [r3, #0]
					break;
 8003dc2:	e03e      	b.n	8003e42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <xTaskIncrementTick+0x14c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d203      	bcs.n	8003de4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <xTaskIncrementTick+0x158>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de2:	e02e      	b.n	8003e42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff fc8b 	bl	8003704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3318      	adds	r3, #24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fc82 	bl	8003704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	4a22      	ldr	r2, [pc, #136]	; (8003e98 <xTaskIncrementTick+0x15c>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <xTaskIncrementTick+0x160>)
 8003e20:	441a      	add	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7ff fc0e 	bl	800364a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <xTaskIncrementTick+0x164>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3b9      	bcc.n	8003db0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e40:	e7b6      	b.n	8003db0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <xTaskIncrementTick+0x164>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4914      	ldr	r1, [pc, #80]	; (8003e9c <xTaskIncrementTick+0x160>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d901      	bls.n	8003e5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <xTaskIncrementTick+0x168>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e004      	b.n	8003e76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <xTaskIncrementTick+0x16c>)
 8003e74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e76:	697b      	ldr	r3, [r7, #20]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	2000046c 	.word	0x2000046c
 8003e84:	20000448 	.word	0x20000448
 8003e88:	200003fc 	.word	0x200003fc
 8003e8c:	20000400 	.word	0x20000400
 8003e90:	2000045c 	.word	0x2000045c
 8003e94:	20000464 	.word	0x20000464
 8003e98:	2000044c 	.word	0x2000044c
 8003e9c:	20000348 	.word	0x20000348
 8003ea0:	20000344 	.word	0x20000344
 8003ea4:	20000458 	.word	0x20000458
 8003ea8:	20000454 	.word	0x20000454

08003eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eb2:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <vTaskSwitchContext+0xac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <vTaskSwitchContext+0xb0>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec0:	e044      	b.n	8003f4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <vTaskSwitchContext+0xb0>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec8:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <vTaskSwitchContext+0xb4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	f1c3 031f 	rsb	r3, r3, #31
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	4921      	ldr	r1, [pc, #132]	; (8003f64 <vTaskSwitchContext+0xb8>)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	607b      	str	r3, [r7, #4]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <vTaskSwitchContext+0x5a>
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <vTaskSwitchContext+0xb8>)
 8003f14:	4413      	add	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d104      	bne.n	8003f38 <vTaskSwitchContext+0x8c>
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <vTaskSwitchContext+0xbc>)
 8003f40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <vTaskSwitchContext+0xbc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	334c      	adds	r3, #76	; 0x4c
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <vTaskSwitchContext+0xc0>)
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	2000046c 	.word	0x2000046c
 8003f5c:	20000458 	.word	0x20000458
 8003f60:	2000044c 	.word	0x2000044c
 8003f64:	20000348 	.word	0x20000348
 8003f68:	20000344 	.word	0x20000344
 8003f6c:	20000010 	.word	0x20000010

08003f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f78:	f000 f852 	bl	8004020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <prvIdleTask+0x28>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d9f9      	bls.n	8003f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <prvIdleTask+0x2c>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f94:	e7f0      	b.n	8003f78 <prvIdleTask+0x8>
 8003f96:	bf00      	nop
 8003f98:	20000348 	.word	0x20000348
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	e00c      	b.n	8003fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <prvInitialiseTaskLists+0x60>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fb18 	bl	80035f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d9ef      	bls.n	8003fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fcc:	480d      	ldr	r0, [pc, #52]	; (8004004 <prvInitialiseTaskLists+0x64>)
 8003fce:	f7ff fb0f 	bl	80035f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fd2:	480d      	ldr	r0, [pc, #52]	; (8004008 <prvInitialiseTaskLists+0x68>)
 8003fd4:	f7ff fb0c 	bl	80035f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fd8:	480c      	ldr	r0, [pc, #48]	; (800400c <prvInitialiseTaskLists+0x6c>)
 8003fda:	f7ff fb09 	bl	80035f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fde:	480c      	ldr	r0, [pc, #48]	; (8004010 <prvInitialiseTaskLists+0x70>)
 8003fe0:	f7ff fb06 	bl	80035f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fe4:	480b      	ldr	r0, [pc, #44]	; (8004014 <prvInitialiseTaskLists+0x74>)
 8003fe6:	f7ff fb03 	bl	80035f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <prvInitialiseTaskLists+0x78>)
 8003fec:	4a05      	ldr	r2, [pc, #20]	; (8004004 <prvInitialiseTaskLists+0x64>)
 8003fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <prvInitialiseTaskLists+0x7c>)
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <prvInitialiseTaskLists+0x68>)
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000348 	.word	0x20000348
 8004004:	200003d4 	.word	0x200003d4
 8004008:	200003e8 	.word	0x200003e8
 800400c:	20000404 	.word	0x20000404
 8004010:	20000418 	.word	0x20000418
 8004014:	20000430 	.word	0x20000430
 8004018:	200003fc 	.word	0x200003fc
 800401c:	20000400 	.word	0x20000400

08004020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004026:	e019      	b.n	800405c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004028:	f000 fa0c 	bl	8004444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <prvCheckTasksWaitingTermination+0x50>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fb63 	bl	8003704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <prvCheckTasksWaitingTermination+0x54>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3b01      	subs	r3, #1
 8004044:	4a0b      	ldr	r2, [pc, #44]	; (8004074 <prvCheckTasksWaitingTermination+0x54>)
 8004046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <prvCheckTasksWaitingTermination+0x58>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <prvCheckTasksWaitingTermination+0x58>)
 8004050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004052:	f000 fa27 	bl	80044a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f810 	bl	800407c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <prvCheckTasksWaitingTermination+0x58>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e1      	bne.n	8004028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000418 	.word	0x20000418
 8004074:	20000444 	.word	0x20000444
 8004078:	2000042c 	.word	0x2000042c

0800407c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	334c      	adds	r3, #76	; 0x4c
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fce3 	bl	8004a54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d108      	bne.n	80040aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb7f 	bl	80047a0 <vPortFree>
				vPortFree( pxTCB );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb7c 	bl	80047a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040a8:	e018      	b.n	80040dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d103      	bne.n	80040bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fb73 	bl	80047a0 <vPortFree>
	}
 80040ba:	e00f      	b.n	80040dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d00a      	beq.n	80040dc <prvDeleteTCB+0x60>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
}
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <prvDeleteTCB+0x5e>
	}
 80040dc:	bf00      	nop
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <prvResetNextTaskUnblockTime+0x38>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <prvResetNextTaskUnblockTime+0x3c>)
 80040f6:	f04f 32ff 	mov.w	r2, #4294967295
 80040fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040fc:	e008      	b.n	8004110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <prvResetNextTaskUnblockTime+0x38>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <prvResetNextTaskUnblockTime+0x3c>)
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	200003fc 	.word	0x200003fc
 8004120:	20000464 	.word	0x20000464

08004124 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004134:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fae2 	bl	8003704 <uxListRemove>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	2201      	movs	r2, #1
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	4b21      	ldr	r3, [pc, #132]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4013      	ands	r3, r2
 800415a:	4a20      	ldr	r2, [pc, #128]	; (80041dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800415c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d10a      	bne.n	800417c <prvAddCurrentTaskToDelayedList+0x58>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800416c:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3304      	adds	r3, #4
 8004172:	4619      	mov	r1, r3
 8004174:	481a      	ldr	r0, [pc, #104]	; (80041e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004176:	f7ff fa68 	bl	800364a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800417a:	e026      	b.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004184:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d209      	bcs.n	80041a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7ff fa76 	bl	8003692 <vListInsert>
}
 80041a6:	e010      	b.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7ff fa6c 	bl	8003692 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d202      	bcs.n	80041ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000448 	.word	0x20000448
 80041d8:	20000344 	.word	0x20000344
 80041dc:	2000044c 	.word	0x2000044c
 80041e0:	20000430 	.word	0x20000430
 80041e4:	20000400 	.word	0x20000400
 80041e8:	200003fc 	.word	0x200003fc
 80041ec:	20000464 	.word	0x20000464

080041f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b04      	subs	r3, #4
 8004200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b04      	subs	r3, #4
 800420e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0201 	bic.w	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b04      	subs	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <pxPortInitialiseStack+0x64>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b14      	subs	r3, #20
 800422a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b04      	subs	r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f06f 0202 	mvn.w	r2, #2
 800423e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3b20      	subs	r3, #32
 8004244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	08004259 	.word	0x08004259

08004258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <prvTaskExitError+0x54>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d00a      	beq.n	8004282 <prvTaskExitError+0x2a>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60fb      	str	r3, [r7, #12]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <prvTaskExitError+0x28>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60bb      	str	r3, [r7, #8]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004296:	bf00      	nop
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0fc      	beq.n	8004298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	2000000c 	.word	0x2000000c

080042b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <pxCurrentTCBConst2>)
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ba:	f380 8809 	msr	PSP, r0
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	4770      	bx	lr
 80042cc:	f3af 8000 	nop.w

080042d0 <pxCurrentTCBConst2>:
 80042d0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042d8:	4808      	ldr	r0, [pc, #32]	; (80042fc <prvPortStartFirstTask+0x24>)
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f380 8808 	msr	MSP, r0
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8814 	msr	CONTROL, r0
 80042ea:	b662      	cpsie	i
 80042ec:	b661      	cpsie	f
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	df00      	svc	0
 80042f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042fa:	bf00      	nop
 80042fc:	e000ed08 	.word	0xe000ed08

08004300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <xPortStartScheduler+0x120>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a46      	ldr	r2, [pc, #280]	; (8004424 <xPortStartScheduler+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10a      	bne.n	8004326 <xPortStartScheduler+0x26>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <xPortStartScheduler+0x120>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <xPortStartScheduler+0x128>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10a      	bne.n	8004346 <xPortStartScheduler+0x46>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60fb      	str	r3, [r7, #12]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004346:	4b39      	ldr	r3, [pc, #228]	; (800442c <xPortStartScheduler+0x12c>)
 8004348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004368:	b2da      	uxtb	r2, r3
 800436a:	4b31      	ldr	r3, [pc, #196]	; (8004430 <xPortStartScheduler+0x130>)
 800436c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <xPortStartScheduler+0x134>)
 8004370:	2207      	movs	r2, #7
 8004372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004374:	e009      	b.n	800438a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004376:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <xPortStartScheduler+0x134>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3b01      	subs	r3, #1
 800437c:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <xPortStartScheduler+0x134>)
 800437e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800438a:	78fb      	ldrb	r3, [r7, #3]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d0ef      	beq.n	8004376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <xPortStartScheduler+0x134>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1c3 0307 	rsb	r3, r3, #7
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00a      	beq.n	80043b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60bb      	str	r3, [r7, #8]
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <xPortStartScheduler+0x134>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <xPortStartScheduler+0x134>)
 80043c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <xPortStartScheduler+0x134>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <xPortStartScheduler+0x134>)
 80043cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043d6:	4b18      	ldr	r3, [pc, #96]	; (8004438 <xPortStartScheduler+0x138>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <xPortStartScheduler+0x138>)
 80043dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <xPortStartScheduler+0x138>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a14      	ldr	r2, [pc, #80]	; (8004438 <xPortStartScheduler+0x138>)
 80043e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043ee:	f000 f8dd 	bl	80045ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <xPortStartScheduler+0x13c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043f8:	f000 f8fc 	bl	80045f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043fc:	4b10      	ldr	r3, [pc, #64]	; (8004440 <xPortStartScheduler+0x140>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0f      	ldr	r2, [pc, #60]	; (8004440 <xPortStartScheduler+0x140>)
 8004402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004408:	f7ff ff66 	bl	80042d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800440c:	f7ff fd4e 	bl	8003eac <vTaskSwitchContext>
	prvTaskExitError();
 8004410:	f7ff ff22 	bl	8004258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	e000ed00 	.word	0xe000ed00
 8004424:	410fc271 	.word	0x410fc271
 8004428:	410fc270 	.word	0x410fc270
 800442c:	e000e400 	.word	0xe000e400
 8004430:	20000470 	.word	0x20000470
 8004434:	20000474 	.word	0x20000474
 8004438:	e000ed20 	.word	0xe000ed20
 800443c:	2000000c 	.word	0x2000000c
 8004440:	e000ef34 	.word	0xe000ef34

08004444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	607b      	str	r3, [r7, #4]
}
 800445c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <vPortEnterCritical+0x58>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <vPortEnterCritical+0x58>)
 8004466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <vPortEnterCritical+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d10f      	bne.n	8004490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <vPortEnterCritical+0x5c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <vPortEnterCritical+0x4c>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	603b      	str	r3, [r7, #0]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <vPortEnterCritical+0x4a>
	}
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <vPortExitCritical+0x50>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <vPortExitCritical+0x24>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	607b      	str	r3, [r7, #4]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <vPortExitCritical+0x50>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <vPortExitCritical+0x50>)
 80044d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <vPortExitCritical+0x50>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <vPortExitCritical+0x42>
 80044da:	2300      	movs	r3, #0
 80044dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c
	...

08004500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004500:	f3ef 8009 	mrs	r0, PSP
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4b15      	ldr	r3, [pc, #84]	; (8004560 <pxCurrentTCBConst>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f01e 0f10 	tst.w	lr, #16
 8004510:	bf08      	it	eq
 8004512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004524:	f380 8811 	msr	BASEPRI, r0
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f7ff fcbc 	bl	8003eac <vTaskSwitchContext>
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f380 8811 	msr	BASEPRI, r0
 800453c:	bc09      	pop	{r0, r3}
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	6808      	ldr	r0, [r1, #0]
 8004542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004546:	f01e 0f10 	tst.w	lr, #16
 800454a:	bf08      	it	eq
 800454c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004550:	f380 8809 	msr	PSP, r0
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w

08004560 <pxCurrentTCBConst>:
 8004560:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop

08004568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004582:	f7ff fbdb 	bl	8003d3c <xTaskIncrementTick>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <SysTick_Handler+0x40>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f383 8811 	msr	BASEPRI, r3
}
 800459e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	e000ed04 	.word	0xe000ed04

080045ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <vPortSetupTimerInterrupt+0x38>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <vPortSetupTimerInterrupt+0x3c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <vPortSetupTimerInterrupt+0x40>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <vPortSetupTimerInterrupt+0x44>)
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <vPortSetupTimerInterrupt+0x34>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e010 	.word	0xe000e010
 80045e4:	e000e018 	.word	0xe000e018
 80045e8:	20000000 	.word	0x20000000
 80045ec:	10624dd3 	.word	0x10624dd3
 80045f0:	e000e014 	.word	0xe000e014

080045f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004604 <vPortEnableVFP+0x10>
 80045f8:	6801      	ldr	r1, [r0, #0]
 80045fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045fe:	6001      	str	r1, [r0, #0]
 8004600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004602:	bf00      	nop
 8004604:	e000ed88 	.word	0xe000ed88

08004608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004614:	f7ff fae8 	bl	8003be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004618:	4b5b      	ldr	r3, [pc, #364]	; (8004788 <pvPortMalloc+0x180>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004620:	f000 f920 	bl	8004864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004624:	4b59      	ldr	r3, [pc, #356]	; (800478c <pvPortMalloc+0x184>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 8093 	bne.w	8004758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01d      	beq.n	8004674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004638:	2208      	movs	r2, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	2b00      	cmp	r3, #0
 8004648:	d014      	beq.n	8004674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f023 0307 	bic.w	r3, r3, #7
 8004650:	3308      	adds	r3, #8
 8004652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <pvPortMalloc+0x6c>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	617b      	str	r3, [r7, #20]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d06e      	beq.n	8004758 <pvPortMalloc+0x150>
 800467a:	4b45      	ldr	r3, [pc, #276]	; (8004790 <pvPortMalloc+0x188>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d869      	bhi.n	8004758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <pvPortMalloc+0x18c>)
 8004686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <pvPortMalloc+0x18c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800468e:	e004      	b.n	800469a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d903      	bls.n	80046ac <pvPortMalloc+0xa4>
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f1      	bne.n	8004690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046ac:	4b36      	ldr	r3, [pc, #216]	; (8004788 <pvPortMalloc+0x180>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d050      	beq.n	8004758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2208      	movs	r2, #8
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	2308      	movs	r3, #8
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d91f      	bls.n	8004718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <pvPortMalloc+0xf8>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	613b      	str	r3, [r7, #16]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004712:	69b8      	ldr	r0, [r7, #24]
 8004714:	f000 f908 	bl	8004928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <pvPortMalloc+0x188>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <pvPortMalloc+0x188>)
 8004724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004726:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <pvPortMalloc+0x188>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <pvPortMalloc+0x190>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d203      	bcs.n	800473a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <pvPortMalloc+0x188>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <pvPortMalloc+0x190>)
 8004738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <pvPortMalloc+0x184>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	431a      	orrs	r2, r3
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <pvPortMalloc+0x194>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3301      	adds	r3, #1
 8004754:	4a11      	ldr	r2, [pc, #68]	; (800479c <pvPortMalloc+0x194>)
 8004756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004758:	f7ff fa54 	bl	8003c04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <pvPortMalloc+0x174>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60fb      	str	r3, [r7, #12]
}
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <pvPortMalloc+0x172>
	return pvReturn;
 800477c:	69fb      	ldr	r3, [r7, #28]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3728      	adds	r7, #40	; 0x28
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20001038 	.word	0x20001038
 800478c:	2000104c 	.word	0x2000104c
 8004790:	2000103c 	.word	0x2000103c
 8004794:	20001030 	.word	0x20001030
 8004798:	20001040 	.word	0x20001040
 800479c:	20001044 	.word	0x20001044

080047a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d04d      	beq.n	800484e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047b2:	2308      	movs	r3, #8
 80047b4:	425b      	negs	r3, r3
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4413      	add	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <vPortFree+0xb8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <vPortFree+0x44>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60fb      	str	r3, [r7, #12]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <vPortFree+0x62>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	60bb      	str	r3, [r7, #8]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <vPortFree+0xb8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01e      	beq.n	800484e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d11a      	bne.n	800484e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <vPortFree+0xb8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	43db      	mvns	r3, r3
 8004822:	401a      	ands	r2, r3
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004828:	f7ff f9de 	bl	8003be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <vPortFree+0xbc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4413      	add	r3, r2
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <vPortFree+0xbc>)
 8004838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800483a:	6938      	ldr	r0, [r7, #16]
 800483c:	f000 f874 	bl	8004928 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <vPortFree+0xc0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4a06      	ldr	r2, [pc, #24]	; (8004860 <vPortFree+0xc0>)
 8004848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800484a:	f7ff f9db 	bl	8003c04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	2000104c 	.word	0x2000104c
 800485c:	2000103c 	.word	0x2000103c
 8004860:	20001048 	.word	0x20001048

08004864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800486a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800486e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <prvHeapInit+0xac>)
 8004872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3307      	adds	r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <prvHeapInit+0xac>)
 8004894:	4413      	add	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <prvHeapInit+0xb0>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <prvHeapInit+0xb0>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4413      	add	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048b0:	2208      	movs	r2, #8
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <prvHeapInit+0xb4>)
 80048c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <prvHeapInit+0xb4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048ce:	4b12      	ldr	r3, [pc, #72]	; (8004918 <prvHeapInit+0xb4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvHeapInit+0xb4>)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <prvHeapInit+0xb8>)
 80048f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <prvHeapInit+0xbc>)
 80048fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <prvHeapInit+0xc0>)
 80048fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	20000478 	.word	0x20000478
 8004914:	20001030 	.word	0x20001030
 8004918:	20001038 	.word	0x20001038
 800491c:	20001040 	.word	0x20001040
 8004920:	2000103c 	.word	0x2000103c
 8004924:	2000104c 	.word	0x2000104c

08004928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <prvInsertBlockIntoFreeList+0xac>)
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	e002      	b.n	800493c <prvInsertBlockIntoFreeList+0x14>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d8f7      	bhi.n	8004936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4413      	add	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d108      	bne.n	800496a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d118      	bne.n	80049b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d00d      	beq.n	80049a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e008      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <prvInsertBlockIntoFreeList+0xb0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e003      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d002      	beq.n	80049c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20001030 	.word	0x20001030
 80049d8:	20001038 	.word	0x20001038

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4d0d      	ldr	r5, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2600      	movs	r6, #0
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4d0b      	ldr	r5, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f8e8 	bl	8004bc4 <_init>
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2600      	movs	r6, #0
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004ce4 	.word	0x08004ce4
 8004a18:	08004ce4 	.word	0x08004ce4
 8004a1c:	08004ce4 	.word	0x08004ce4
 8004a20:	08004ce8 	.word	0x08004ce8

08004a24 <__retarget_lock_acquire_recursive>:
 8004a24:	4770      	bx	lr

08004a26 <__retarget_lock_release_recursive>:
 8004a26:	4770      	bx	lr

08004a28 <memset>:
 8004a28:	4402      	add	r2, r0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <memset+0xa>
 8004a30:	4770      	bx	lr
 8004a32:	f803 1b01 	strb.w	r1, [r3], #1
 8004a36:	e7f9      	b.n	8004a2c <memset+0x4>

08004a38 <cleanup_glue>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	6809      	ldr	r1, [r1, #0]
 8004a3e:	4605      	mov	r5, r0
 8004a40:	b109      	cbz	r1, 8004a46 <cleanup_glue+0xe>
 8004a42:	f7ff fff9 	bl	8004a38 <cleanup_glue>
 8004a46:	4621      	mov	r1, r4
 8004a48:	4628      	mov	r0, r5
 8004a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a4e:	f000 b869 	b.w	8004b24 <_free_r>
	...

08004a54 <_reclaim_reent>:
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <_reclaim_reent+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4283      	cmp	r3, r0
 8004a5a:	b570      	push	{r4, r5, r6, lr}
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	d051      	beq.n	8004b04 <_reclaim_reent+0xb0>
 8004a60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a62:	b143      	cbz	r3, 8004a76 <_reclaim_reent+0x22>
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d14a      	bne.n	8004b00 <_reclaim_reent+0xac>
 8004a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	b111      	cbz	r1, 8004a76 <_reclaim_reent+0x22>
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f857 	bl	8004b24 <_free_r>
 8004a76:	6961      	ldr	r1, [r4, #20]
 8004a78:	b111      	cbz	r1, 8004a80 <_reclaim_reent+0x2c>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 f852 	bl	8004b24 <_free_r>
 8004a80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a82:	b111      	cbz	r1, 8004a8a <_reclaim_reent+0x36>
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 f84d 	bl	8004b24 <_free_r>
 8004a8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a8c:	b111      	cbz	r1, 8004a94 <_reclaim_reent+0x40>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f000 f848 	bl	8004b24 <_free_r>
 8004a94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a96:	b111      	cbz	r1, 8004a9e <_reclaim_reent+0x4a>
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 f843 	bl	8004b24 <_free_r>
 8004a9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004aa0:	b111      	cbz	r1, 8004aa8 <_reclaim_reent+0x54>
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 f83e 	bl	8004b24 <_free_r>
 8004aa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004aaa:	b111      	cbz	r1, 8004ab2 <_reclaim_reent+0x5e>
 8004aac:	4620      	mov	r0, r4
 8004aae:	f000 f839 	bl	8004b24 <_free_r>
 8004ab2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004ab4:	b111      	cbz	r1, 8004abc <_reclaim_reent+0x68>
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 f834 	bl	8004b24 <_free_r>
 8004abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abe:	b111      	cbz	r1, 8004ac6 <_reclaim_reent+0x72>
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f000 f82f 	bl	8004b24 <_free_r>
 8004ac6:	69a3      	ldr	r3, [r4, #24]
 8004ac8:	b1e3      	cbz	r3, 8004b04 <_reclaim_reent+0xb0>
 8004aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004acc:	4620      	mov	r0, r4
 8004ace:	4798      	blx	r3
 8004ad0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ad2:	b1b9      	cbz	r1, 8004b04 <_reclaim_reent+0xb0>
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ada:	f7ff bfad 	b.w	8004a38 <cleanup_glue>
 8004ade:	5949      	ldr	r1, [r1, r5]
 8004ae0:	b941      	cbnz	r1, 8004af4 <_reclaim_reent+0xa0>
 8004ae2:	3504      	adds	r5, #4
 8004ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ae6:	2d80      	cmp	r5, #128	; 0x80
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	d1f8      	bne.n	8004ade <_reclaim_reent+0x8a>
 8004aec:	4620      	mov	r0, r4
 8004aee:	f000 f819 	bl	8004b24 <_free_r>
 8004af2:	e7ba      	b.n	8004a6a <_reclaim_reent+0x16>
 8004af4:	680e      	ldr	r6, [r1, #0]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f814 	bl	8004b24 <_free_r>
 8004afc:	4631      	mov	r1, r6
 8004afe:	e7ef      	b.n	8004ae0 <_reclaim_reent+0x8c>
 8004b00:	2500      	movs	r5, #0
 8004b02:	e7ef      	b.n	8004ae4 <_reclaim_reent+0x90>
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	bf00      	nop
 8004b08:	20000010 	.word	0x20000010

08004b0c <__malloc_lock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	; (8004b14 <__malloc_lock+0x8>)
 8004b0e:	f7ff bf89 	b.w	8004a24 <__retarget_lock_acquire_recursive>
 8004b12:	bf00      	nop
 8004b14:	20001134 	.word	0x20001134

08004b18 <__malloc_unlock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	; (8004b20 <__malloc_unlock+0x8>)
 8004b1a:	f7ff bf84 	b.w	8004a26 <__retarget_lock_release_recursive>
 8004b1e:	bf00      	nop
 8004b20:	20001134 	.word	0x20001134

08004b24 <_free_r>:
 8004b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d048      	beq.n	8004bbc <_free_r+0x98>
 8004b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f1a1 0404 	sub.w	r4, r1, #4
 8004b36:	bfb8      	it	lt
 8004b38:	18e4      	addlt	r4, r4, r3
 8004b3a:	f7ff ffe7 	bl	8004b0c <__malloc_lock>
 8004b3e:	4a20      	ldr	r2, [pc, #128]	; (8004bc0 <_free_r+0x9c>)
 8004b40:	9801      	ldr	r0, [sp, #4]
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	4615      	mov	r5, r2
 8004b46:	b933      	cbnz	r3, 8004b56 <_free_r+0x32>
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6014      	str	r4, [r2, #0]
 8004b4c:	b003      	add	sp, #12
 8004b4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b52:	f7ff bfe1 	b.w	8004b18 <__malloc_unlock>
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	d90b      	bls.n	8004b72 <_free_r+0x4e>
 8004b5a:	6821      	ldr	r1, [r4, #0]
 8004b5c:	1862      	adds	r2, r4, r1
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	bf04      	itt	eq
 8004b62:	681a      	ldreq	r2, [r3, #0]
 8004b64:	685b      	ldreq	r3, [r3, #4]
 8004b66:	6063      	str	r3, [r4, #4]
 8004b68:	bf04      	itt	eq
 8004b6a:	1852      	addeq	r2, r2, r1
 8004b6c:	6022      	streq	r2, [r4, #0]
 8004b6e:	602c      	str	r4, [r5, #0]
 8004b70:	e7ec      	b.n	8004b4c <_free_r+0x28>
 8004b72:	461a      	mov	r2, r3
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	b10b      	cbz	r3, 8004b7c <_free_r+0x58>
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	d9fa      	bls.n	8004b72 <_free_r+0x4e>
 8004b7c:	6811      	ldr	r1, [r2, #0]
 8004b7e:	1855      	adds	r5, r2, r1
 8004b80:	42a5      	cmp	r5, r4
 8004b82:	d10b      	bne.n	8004b9c <_free_r+0x78>
 8004b84:	6824      	ldr	r4, [r4, #0]
 8004b86:	4421      	add	r1, r4
 8004b88:	1854      	adds	r4, r2, r1
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	6011      	str	r1, [r2, #0]
 8004b8e:	d1dd      	bne.n	8004b4c <_free_r+0x28>
 8004b90:	681c      	ldr	r4, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	6053      	str	r3, [r2, #4]
 8004b96:	4421      	add	r1, r4
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	e7d7      	b.n	8004b4c <_free_r+0x28>
 8004b9c:	d902      	bls.n	8004ba4 <_free_r+0x80>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	6003      	str	r3, [r0, #0]
 8004ba2:	e7d3      	b.n	8004b4c <_free_r+0x28>
 8004ba4:	6825      	ldr	r5, [r4, #0]
 8004ba6:	1961      	adds	r1, r4, r5
 8004ba8:	428b      	cmp	r3, r1
 8004baa:	bf04      	itt	eq
 8004bac:	6819      	ldreq	r1, [r3, #0]
 8004bae:	685b      	ldreq	r3, [r3, #4]
 8004bb0:	6063      	str	r3, [r4, #4]
 8004bb2:	bf04      	itt	eq
 8004bb4:	1949      	addeq	r1, r1, r5
 8004bb6:	6021      	streq	r1, [r4, #0]
 8004bb8:	6054      	str	r4, [r2, #4]
 8004bba:	e7c7      	b.n	8004b4c <_free_r+0x28>
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bd30      	pop	{r4, r5, pc}
 8004bc0:	20001050 	.word	0x20001050

08004bc4 <_init>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr

08004bd0 <_fini>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr
